0:00:00.580,0:00:03.360
C обращением обычного commit-а все просто

0:00:03.420,0:00:06.220
куда интереснее ситуация со слиянием.

0:00:06.220,0:00:08.420
Допустим мы доделали ветку 'feature'

0:00:08.660,0:00:10.760
и произвели её слияние с 'master'

0:00:11.120,0:00:13.320
Отправили обновленный 'master' коллегам

0:00:13.320,0:00:15.240
Они его успешно приняли

0:00:15.240,0:00:17.320
возможно, сделали поверх него что-то еще

0:00:17.320,0:00:18.700
и тут. Ой

0:00:18.700,0:00:21.400
Обнаружена серьезная проблема в коде с 'feature'.

0:00:21.400,0:00:23.400
Надо срочно слияния отменить

0:00:23.460,0:00:24.700
и ветку доработать

0:00:24.700,0:00:27.300
Конечно слияние как и любой commit

0:00:27.560,0:00:29.620
можно отменить через жесткий 'reset'

0:00:29.660,0:00:31.800
но как и в предыдущем выпуске

0:00:31.800,0:00:33.680
такой способ не подойдет.

0:00:33.680,0:00:36.200
Так как отменит commit у нас на компьютере

0:00:36.200,0:00:37.040
а забрать его у коллег

0:00:37.120,0:00:38.300
таким образом нельзя

0:00:38.300,0:00:40.500
тем более если они сделали что-то сверху.

0:00:41.300,0:00:44.820
Давайте попробуем сделать обратный commit для commit-а слияния

0:00:44.820,0:00:46.220
при помощи 'git revert'.

0:00:46.560,0:00:48.560
Возникла ошибка?!

0:00:48.560,0:00:50.560
Потому что мы отменяем не простой commit

0:00:50.560,0:00:51.900
а commit слияния.

0:00:51.900,0:00:53.120
А commit слияния

0:00:53.160,0:00:54.900
можно рассматривать с разных сторон.

0:00:54.900,0:00:57.320
Если посмотреть по сравнению с первым родителем

0:00:57.320,0:00:59.320
он вносит одни изменения

0:00:59.320,0:01:01.060
а по сравнению со вторым - другие.

0:01:01.540,0:01:05.560
Требуется указать, какие именно из них должен обратить 'revert'.

0:01:05.560,0:01:07.080
В данном случае

0:01:07.080,0:01:09.300
нам нужно отменить вот эти изменения

0:01:09.480,0:01:10.300
то есть, те которые

0:01:10.300,0:01:14.300
слияние привнесло, по сравнению с предыдущим состоянием на ветке 'master'.

0:01:15.120,0:01:17.400
Укажем это при помощи флага '-m'

0:01:17.400,0:01:21.000
и дальше номер родителя по отношению к которому, изменения нужно отменить

0:01:21.000,0:01:23.000
по отношению к первому родителю.

0:01:23.200,0:01:25.400
Сообщение к commit-а говорит само за себя.

0:01:25.400,0:01:27.400
Давайте его таким и оставим.

0:01:27.720,0:01:29.060
Готово.

0:01:29.060,0:01:31.060
Давайте посмотрим новый commit

0:01:31.060,0:01:32.540
который создала команда 'revert'.

0:01:33.020,0:01:34.820
его еще называют commit отмены.

0:01:34.820,0:01:37.020
И он удаляет вот эти изменения.

0:01:37.240,0:01:38.400
Это как раз те

0:01:38.400,0:01:40.400
которые ранее я добавлял в commit слияния

0:01:40.400,0:01:42.120
теперь они отменены.

0:01:42.120,0:01:43.500
Все славно.

0:01:43.500,0:01:46.720
Дальше в обычном режиме идет работа над 'master'

0:01:46.720,0:01:49.900
и параллельно за кадром идет доделка ветки 'feature'

0:01:49.900,0:01:50.820
И наконец

0:01:50.820,0:01:52.360
ветка 'feature' снова доделана

0:01:52.360,0:01:54.360
все недостатки мы исправили

0:01:54.360,0:01:56.360
можно вливать в 'master' заново.

0:01:56.360,0:01:57.920
Но если мы сейчас

0:01:58.140,0:02:00.340
попробуем запустить 'git merge feature'

0:02:00.340,0:02:03.100
то результат будет совсем не тот, который мы ожидаем

0:02:03.100,0:02:04.680
Для начала

0:02:04.680,0:02:06.680
Git поищет где ветки разделились

0:02:06.720,0:02:08.120
общего родителя.

0:02:08.120,0:02:10.120
В данном случае он вот здесь.

0:02:10.120,0:02:14.120
С точки зрения Git слияние уже было произведено ранее

0:02:14.360,0:02:15.500
и теперь в 'master'

0:02:15.500,0:02:17.640
остаётся добавить только вот этот commit.

0:02:17.860,0:02:20.360
новый, с момента последнего слияния.

0:02:20.360,0:02:23.000
Git ведь не анализирует содержимое commit-ов.

0:02:23.160,0:02:25.880
Не смотрит что у нас один commit обращает другой.

0:02:25.880,0:02:26.880
Он смотрит

0:02:26.880,0:02:28.260
только на структуру веток

0:02:28.260,0:02:29.680
и по ней выходит

0:02:29.780,0:02:31.480
что старые commit-ы ветки 'feature'

0:02:31.480,0:02:33.080
в ветке 'master' уже есть.

0:02:33.080,0:02:34.540
Так что повторное слияние

0:02:34.540,0:02:35.820
их проигнорирует.

0:02:35.820,0:02:36.840
В результате

0:02:36.840,0:02:38.200
они просто пропадут.

0:02:38.200,0:02:40.200
Вы наверняка это заметите

0:02:40.280,0:02:41.620
так как само слияние при этом

0:02:41.620,0:02:43.360
скорее всего не пройдет.

0:02:43.360,0:02:44.660
Будут конфликты

0:02:44.660,0:02:46.220
потому что этот commit

0:02:46.220,0:02:47.100
ожидает

0:02:47.100,0:02:49.500
что в ветке будут изменения из предыдущих

0:02:49.500,0:02:50.460
а их нет.

0:02:50.460,0:02:52.060
Мы же их отменили.

0:02:52.520,0:02:53.680
Из этой ситуации

0:02:53.680,0:02:55.680
есть несколько выходов.

0:02:55.680,0:02:58.420
Самый наивный это последовать пословице

0:02:58.420,0:03:01.480
"Если гора не идет к Магомету, то Магомет идет к горе."

0:03:01.820,0:03:04.800
Если Git не хочет копировать изменения старых commit-ов

0:03:04.800,0:03:06.940
то мы скопируем их самостоятельно.

0:03:06.940,0:03:09.740
А затем, запустить 'git merge feature'.

0:03:09.820,0:03:12.780
Впрочем, копировать 2 commit-а нет необходимости

0:03:12.780,0:03:14.320
потому что, заметим

0:03:14.320,0:03:16.320
что все предыдущие изменения с 'feature'

0:03:16.460,0:03:18.200
находятся в commit-е слияния.

0:03:18.200,0:03:20.200
Мы же уже их добавляли в 'master'.

0:03:20.200,0:03:22.200
поэтому можно взять их оттуда

0:03:22.500,0:03:27.380
Заодно если в commit-е слияния были изменения связанные, с разрешением конфликтов

0:03:27.380,0:03:29.380
то такой вызов их тоже учтет.

0:03:30.120,0:03:32.920
Или же еще вариант отменить commit отмены.

0:03:32.920,0:03:33.920
То есть в нашем случае

0:03:33.920,0:03:35.360
вот такая команда.

0:03:35.360,0:03:38.900
Например commit слияния добавил такую строку.

0:03:38.900,0:03:41.220
тогда commit отмены ее удалил.

0:03:41.500,0:03:43.480
А если сделать обратный к нему

0:03:43.480,0:03:45.400
то он ее добавит обратно.

0:03:45.400,0:03:47.660
Как вы можете видеть на картинке справа

0:03:47.660,0:03:48.800
в нашем случае

0:03:48.800,0:03:51.360
эта команда добавит ровно те же изменения

0:03:51.360,0:03:53.200
что и 'cherry-pick' слияние.

0:03:53.220,0:03:55.620
Но на практике этот вариант надежнее.

0:03:55.620,0:03:57.960
потому что между commit-ом слияния

0:03:57.960,0:04:01.240
и его отменой могли быть какие-то другие commit-ы.

0:04:01.480,0:04:03.400
И при этом возможна ситуация

0:04:03.400,0:04:04.860
что при вызове 'revert'

0:04:04.860,0:04:07.640
возник конфликт, который был разрешен

0:04:07.640,0:04:09.300
но в итоге commit отмены

0:04:09.520,0:04:12.020
не является точной противоположностью слияния.

0:04:12.740,0:04:14.740
И делая отмену отмены

0:04:14.740,0:04:16.540
мы как раз это все учтем.

0:04:16.540,0:04:19.000
То есть вернем ровно то, что было отменено.

0:04:19.720,0:04:21.840
В нашем случае этого конечно не было

0:04:21.840,0:04:23.000
но на будущее

0:04:23.000,0:04:24.240
этот вариант предпочтителен

0:04:24.240,0:04:26.580
и поэтому сейчас я использую именно его.

0:04:26.720,0:04:27.960
Запускаю.

0:04:28.140,0:04:30.140
Немного исправлю сообщения

0:04:30.540,0:04:31.040
и

0:04:31.040,0:04:31.660
Готово.

0:04:32.520,0:04:35.020
Посмотрим на 'diff' этого нового commit-а.

0:04:35.020,0:04:36.220
Вот

0:04:36.220,0:04:38.040
вот видно что отмена отмены

0:04:38.040,0:04:39.900
вернула старые изменение ветки 'feature'

0:04:39.900,0:04:41.260
обратно в 'master'.

0:04:42.080,0:04:43.580
Теперь мы можем завершить

0:04:43.580,0:04:45.580
повторное слияние.

0:04:47.140,0:04:49.480
Итак, сейчас я подробно рассказал

0:04:49.480,0:04:50.840
что и зачем мы делаем

0:04:50.840,0:04:52.420
какие есть варианты.

0:04:52.420,0:04:55.740
Если подвести черту, то после отмена слияния

0:04:55.740,0:04:58.360
если хотим повторно влить эту же ветку

0:04:58.580,0:05:01.360
отменяем отмену и сливаем заново.

0:05:01.360,0:05:02.960
Как вы можете заметить

0:05:02.960,0:05:05.160
это выглядит не совсем элегантно.

0:05:05.720,0:05:07.600
Получается что повторное слияние

0:05:07.600,0:05:09.800
фактически распадается на 2 commit-а

0:05:09.800,0:05:12.360
один из которых вообще не commit слияния

0:05:12.360,0:05:13.800
а отмена отмены.

0:05:14.340,0:05:14.980
В будущем

0:05:14.980,0:05:17.700
это может создать неудобства при чтении истории

0:05:17.880,0:05:20.880
и поиски откуда взялись те или иные изменения.

0:05:21.000,0:05:23.200
Поэтому, если ситуация позволяет

0:05:23.200,0:05:25.620
то лучше вообще избегать отмены слияний.

0:05:25.620,0:05:28.700
А если что-то после слияния пошло не так

0:05:28.860,0:05:31.940
то без отмены просто исправить допущенные ошибки.

0:05:32.500,0:05:34.500
Хотя, конечно, это не всегда возможно

0:05:34.500,0:05:36.100
если серьезная проблема

0:05:36.100,0:05:37.200
то мы бываем вынуждены

0:05:37.200,0:05:39.200
отменить слияние целиком.

0:05:39.200,0:05:40.900
Поэтому я все это и рассказываю.

0:05:40.900,0:05:42.180
Также замечу

0:05:42.180,0:05:43.740
что, если повторное слияние

0:05:43.740,0:05:45.500
делается после перебазирования

0:05:45.500,0:05:46.680
то это чуть проще.

0:05:46.680,0:05:48.720
Отмена отмены, в этом случае, не понадобится.

0:05:48.780,0:05:51.340
Более подробно в следующем выпуске.