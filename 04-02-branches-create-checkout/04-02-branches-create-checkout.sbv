0:00:00.000,0:00:05.520
а теперь, когда вы уже в общих чертах понимаете, что такое ветки, давайте поработаем с ними на практике

0:00:06.100,0:00:10.710
я сейчас нахожусь в директории "project" и здесь есть единственный файл "index.html"

0:00:11.200,0:00:17.850
слева будет редактор терминал, я буду работать над проектом, а справа буду наглядно показывать, что происходит с репозиторием

0:00:18.670,0:00:25.260
итак, первое, я, конечно же, создам наш репозиторий командой "git init" и добавлю в него "index.html" и

0:00:25.810,0:00:30.929
когда я делаю первый коммит, то гит создает ветку по умолчанию, она называется мастер

0:00:31.300,0:00:38.550
если говорить технически, то ветка - это специальная ссылка на коммит, ее даже можно увидеть, если открыт ".git" директорию и

0:00:39.070,0:00:43.529
посмотреть "refs" -> "heads" вот, вот она ветка мастер

0:00:43.840,0:00:48.090
буквально вот этот маленький файл, и сейчас она ссылается на коммит вот с таким

0:00:48.460,0:00:54.000
идентификатором, это полный идентификатор нашего первого коммита, в нем 40 шестнадцатеричных цифр,

0:00:54.460,0:00:59.759
если мы посмотрим ниже на результат команды коммит, то мы как раз увидим первые цифры этого идентификатора

0:01:00.579,0:01:05.969
такой способ просмотра веток как я сейчас показал, то есть через директорию ".git", вообще говоря, не традиционен

0:01:06.150,0:01:10.109
и на самом деле, он не очень-то надежен, потому что ветки в этой директории только в начале

0:01:10.780,0:01:16.500
время от времени гит пакует свои данные и, в частности, пакует ветки в специальном формате уже в другое место

0:01:16.900,0:01:21.989
так что здесь вы их можете не найти и для просмотра веток используется специальная команда "git branch"

0:01:22.600,0:01:27.360
или "git branch -v", чтобы ветка и информация о коммите, на который она указывает

0:01:27.939,0:01:33.089
здесь идентификатор тоже сокращенный, но гит вообще позволяет на равных использовать и полные, и сокращенные

0:01:33.610,0:01:37.110
идентификатора при этом сокращенный должен состоять из четырех или более

0:01:37.659,0:01:43.319
начальных цифр, главное, чтобы гит смог однозначно определить по нему коммит, поэтому справа вот у меня

0:01:43.659,0:01:48.569
схематичное изображение коммита, я буду указывать именно такие сокращенные идентификаторы

0:01:49.270,0:01:54.119
прямо в директории ".git" есть ещё один очень важный файл, который называется "head", "head"

0:01:55.090,0:01:58.680
используется для того, чтобы гит репозиторий понимал, где мы находимся сейчас

0:01:59.710,0:02:05.710
ведь мы можем переключаться между ветками, и "head" как раз хранит ссылку на текущую ветку, сейчас мы на ветке мастер

0:02:06.560,0:02:12.280
технически "head" может также хранить ссылку на коммит,  но это особое состояние, она встречается редко, и мы посмотрим его позже

0:02:12.620,0:02:14.770
обычно это все же ветка как вот здесь,

0:02:15.200,0:02:16.489
а теперь давайте закроем

0:02:16.489,0:02:20.859
директорию ".git", я буду к ней иногда возвращаться, чтобы мы лучше понимали как все устроено

0:02:20.989,0:02:24.999
но при обычной ежедневной работе это нам конечно не потребуется

0:02:25.880,0:02:32.919
давайте продолжим разработку, сделаем новый файл, например, "script.js" и здесь будет небольшая функция

0:02:36.620,0:02:39.009
подключим новый скрипт к "index.html" и

0:02:42.110,0:02:44.110
добавим наши изменения в репозиторий

0:02:47.120,0:02:49.509
теперь обратите внимание на правую часть экрана

0:02:50.209,0:02:56.799
когда происходит коммит, то гит сначала смотрит на что указывает "head". "head" указывает на мастер

0:02:57.350,0:03:00.249
а мастер содержит идентификатор нашего первого коммита

0:03:00.920,0:03:05.350
таким образом, гит определяет, где мы сейчас находимся и в новый коммит

0:03:05.780,0:03:13.540
записывается информация о его родителя, то есть о том, на базе которого он создан в данном случае вот это вот родительский коммит

0:03:13.670,0:03:15.670
для нового вот этого

0:03:16.400,0:03:18.549
после того, как новый коммит создан

0:03:19.220,0:03:24.429
ссылка мастер переключается на него, то есть буквально в мастер записывается новый идентификатор

0:03:24.739,0:03:32.349
коммит на который указывает ветка называют ее вершиной, то есть данном случае вот этот наш последний коммит является вершиной ветки мастер

0:03:32.810,0:03:37.449
если мы выведем список веток с ключом "-v", то мы так же увидим что вершина обновилась

0:03:38.000,0:03:43.359
давайте сделаем еще изменения в дополнение к функции "sayHi" создадим функцию "sayBye"

0:03:44.150,0:03:48.100
теперь если я сделала новый коммит, то произойдет в точности тоже самое

0:03:49.850,0:03:56.320
вот посмотрите справа это показываю, у нас появился новый коммит и ссылка мастер перенеслась на него

0:03:56.660,0:04:00.850
так можно было бы коммитить и дальше, но тут у нас появилась новая идея для

0:04:01.310,0:04:06.399
реализации которой, мы создадим новую ветку для этого мы используем команду "git branch" и

0:04:06.590,0:04:11.350
на этот раз передадим ей название новой ветки, например, назовем ее "feature"

0:04:12.400,0:04:17.400
ветка готова, если мы посмотрим в директорию ".git", то мы в принципе тоже сможем ее увидеть

0:04:18.340,0:04:19.570
вот

0:04:19.570,0:04:26.820
новая ветка сейчас указывает на тот же коммит, что и мастер, видите, то есть создание ветки в гит это очень быстрая простая операция

0:04:27.130,0:04:29.579
это просто создание новой ссылки на коммит

0:04:30.669,0:04:33.598
следующие наши действия это переключиться на новую ветку

0:04:34.090,0:04:39.810
для этого нужно обновить "head" сейчас оно такое для переключения используется команда "git checkout"

0:04:40.440,0:04:42.440
и дальше название ветки

0:04:42.639,0:04:49.019
раз, отлично, как видите ссылка "head" изменилась, теперь мы на новой ветке и давайте в ней поработаем

0:04:49.419,0:04:51.419
закроем директорию гит

0:04:51.520,0:04:55.710
создадим в "script.js" новую функцию, она будет называться например "work"

0:04:57.370,0:04:59.370
добавим ее в репозиторий

0:05:01.870,0:05:06.060
снова обратите внимание на картинку справа у нас был создан новый коммит

0:05:06.430,0:05:13.410
так как текущей веткой, то есть веткой, на который указывает head является "feature" то теперь сдвинулся указатель "feature"

0:05:14.139,0:05:19.288
именно "feature" появился новый идентификатор коммита, а ветка мастера осталась на месте как была

0:05:20.530,0:05:25.019
давайте посмотрим текущее состояние веток команды "git branch -v" и

0:05:25.659,0:05:31.799
вот видно у нас есть две ветки звездочкой обозначена текущая и текущая указывает на новый коммит

0:05:33.250,0:05:38.070
давайте сделаем еще что-нибудь например добавим вызов нашей новой функции в "index.html"

0:05:43.000,0:05:45.000
сохраню это изменение в репозитории

0:05:45.970,0:05:48.779
мы получили еще один коммит ветки "feature"

0:05:49.660,0:05:51.660
конечно я еще раз обращаю ваше внимание

0:05:52.240,0:05:56.820
технически ветка это всего лишь ссылка на один конкретный коммит, но при этом

0:05:57.250,0:06:04.890
принадлежащими ветке или находящимися в ветке называют все коммиты, которые находятся на пути от вершины вниз по цепочке родителей

0:06:05.200,0:06:09.059
как видно прямо сейчас вообще все коммиты находятся на ветке "feature"

0:06:10.210,0:06:17.489
логический смысл здесь очень простой. все они содержат изменения, которые в итоге привели к состоянию проекта на момент "feature"

0:06:18.190,0:06:25.019
а первые три коммита также принадлежат ветке мастер и в итоге дают состояние проекта на момент вершины ветки мастер

0:06:26.950,0:06:32.849
давайте продолжим разработку мы можем дальше работать над веткой "feature", но вполне возможно, что до окончания

0:06:33.070,0:06:40.499
работы над ней нам понадобятся вернуться на мастер, чтобы внести какие-то изменения туда, для переключения ветки мы используем команду "git checkout"

0:06:40.919,0:06:44.909
в данном случае мы на "feature" "git checkout master" сделает две вещи

0:06:45.460,0:06:49.260
первое, изменит ссылку на текущую ветку в "head" и второе

0:06:49.660,0:06:57.029
перенесет в рабочую директорию файлы проекта из ветки мастер в том состоянии, в котором мы их оставили, то есть на момент вот этого

0:06:57.280,0:06:59.669
предыдущего коммита, на который указывает мастер

0:07:00.370,0:07:06.060
ну вот, видите, у нас и "head" переместилась и файл в редакторе обновился теперь рабочей директории

0:07:06.490,0:07:10.890
находятся "index.html" и "script.js" с ветки мастер можно также вернуться обратно

0:07:11.530,0:07:18.630
если мы вдруг передумали и вот опять же по редактору видно файлы восстановлены из ветки "feature", как видите, все очень просто

0:07:19.600,0:07:22.109
используя "git checkout" мы можем легко переключаться между

0:07:22.479,0:07:29.669
работой над новые идеи "feature" и основной веткой мастер при этом изменение сделанные в "feature" при чекаут мастер становятся не видны

0:07:30.040,0:07:37.080
ну и конечно в мастер мы тоже можем продолжить разработку и там появится изменения которые исчезнут при переключении обратно на "feature"

0:07:37.270,0:07:44.609
так что, хотя технически ветки это всего лишь ссылки на коммит при таком использовании они играют роль изолированных потоков разработки

0:07:45.400,0:07:50.970
ну что ж пойдем дальше сейчас я снова на ветке мастер и собираюсь внести кое-какие исправления

0:07:51.310,0:07:58.280
пока они не готовы я изолирую их от основного потока разработки выделив в отдельную ветку которую назову "fix"

0:07:59.040,0:08:04.670
ключ "-b" в команде "checkout" означает, что нужно создать ветку и тут же переключиться на нее

0:08:04.980,0:08:11.659
то есть иначе говоря это тоже самое, как если бы я запустил две команды "git branch fix" и затем "checkout fix"

0:08:12.870,0:08:19.190
давайте запущу. итак, мы создали новую ветку, то есть указатель на коммит под названием "fix" и

0:08:19.590,0:08:27.320
чекаут переключил "head" на нее, при этом и "fix" и мастер сейчас указывают на один и тот же текущий коммит, давайте посмотрим даже

0:08:27.510,0:08:35.030
"git branch -v" ну вот, файлы в них тоже соответственно одни и те же, и теперь, находясь на ветке "fix", я вношу свои исправления

0:08:35.610,0:08:40.280
ранее, когда я создавал "script.js" я функции сделал, а вызвать их забыл

0:08:41.130,0:08:45.770
поэтому давайте сейчас добавлю в "index.html" сверху вызов "sayHi()"

0:08:46.500,0:08:48.500
ну что ж отлично смотрится

0:08:49.050,0:08:51.050
сохраняю это изменение в репозиторий

0:08:52.020,0:08:54.509
и я тут подумал давайте "sayBye()" тоже вызову

0:08:56.590,0:08:58.590
еще один коммит

0:08:59.170,0:09:03.569
заметим, что так как "head" теперь указывает на "fix", то при новых коммитах сдвигалась именно она
