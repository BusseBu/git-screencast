0:00:00.000,0:00:04.230
Всем привет! В этом выпуске мы рассмотрим форматы дат для Git.

0:00:04.450,0:00:09.540
На него я ссылаюсь с выпуска скринкаста о командах 'log', 'reflog' и в других местах,

0:00:09.700,0:00:14.940
где нужно либо передать дату в Git, либо попросить Git вывести ее в определенном формате.

0:00:16.180,0:00:18.940
Сначала посмотрим как задать дату для Git.

0:00:18.940,0:00:20.500
Вот ряд примеров:

0:00:20.500,0:00:22.740
как видно Git довольно таки всеяден.

0:00:23.020,0:00:25.540
Даты задаются, с точностью до секунды.

0:00:25.620,0:00:28.520
Если временной зоны нет, то предполагается локальная.

0:00:29.140,0:00:31.920
Можно, и как здесь, задать только
дату без времени.

0:00:32.500,0:00:35.280
Замечу, что при использовании слеша '/ ', 
месяц должен быть первым

0:00:35.780,0:00:37.780
то есть 'месяц/день/год'.

0:00:38.280,0:00:41.680
В последней строке даты в виде Unix timestamp-а

0:00:41.860,0:00:46.240
то есть числа секунд, прошедших 
с 1 января 1970 года.

0:00:46.540,0:00:50.800
Это весьма распространённый формат для представления даты, как одного числа.

0:00:50.860,0:00:54.660
Он как правило используется в программировании, и Git его также понимает.

0:00:55.320,0:00:57.660
Пока все выглядит очень просто, не правда ли?!

0:00:58.020,0:01:01.320
Веселье начинается, когда дата задана частично.

0:01:01.320,0:01:04.240
Для демонстрации я создал тестовый репозиторий, 

0:01:04.380,0:01:06.660
в котором commit-ы идут каждые 3 часа

0:01:06.660,0:01:10.140
Сейчас я их выведу в коротком формате, чтобы ничего лишнего...

0:01:10.660,0:01:12.520
И тут же, рассмотрим вопрос. 

0:01:12.640,0:01:16.260
Что если я запрошу у Git commit-ы до 2-го января.

0:01:16.260,0:01:18.980
Что по-вашему должна вывести такая команда? 

0:01:19.140,0:01:20.280
Ну, например,

0:01:20.280,0:01:24.820
может быть она должна вывести все от 2-го января и ранее, включительно? 

0:01:24.820,0:01:26.760
То есть вот эти commit-ы.

0:01:26.760,0:01:31.900
Или, может быть, она должна вывести commit-ы до 0 часов 0 минут 2-го января

0:01:31.980,0:01:35.240
то есть те, которые были до этого числа, 
а именно, вот эти!

0:01:35.860,0:01:37.680
Ответ:  ни то ни другое.

0:01:37.689,0:01:39.100
Давайте запущу.

0:01:39.100,0:01:42.760
Как видно, в вывод попали некоторые commit-ы 
от 2-го числа,

0:01:44.020,0:01:46.020
но не все. Что же произошло? 
A очень просто.

0:01:46.020,0:01:48.780
Если время не указано, то берется текущее.

0:01:48.840,0:01:54.500
Так как сейчас у меня около четырех часов то Git воспринял эту дату, как такую.

0:01:54.900,0:01:58.880
Чтобы лучше понимать подобные тонкие моменты рассмотрим еще ряд примеров.

0:01:59.460,0:02:03.260
Представим, что сейчас на дворе 
30-е января 18-го года

0:02:03.560,0:02:05.079
12:30

0:02:05.080,0:02:08.860
Слева я буду показывать даты, а справа - их восприятие Git

0:02:09.100,0:02:11.940
Кое-что мы уже видели, а именно, если указывать только дату 

0:02:12.080,0:02:13.880
то время будет взято текущее.

0:02:13.880,0:02:15.000
Давайте дальше

0:02:15.020,0:02:16.660
Можно указать только время

0:02:16.820,0:02:18.760
тогда будет текущая дата

0:02:18.920,0:02:22.320
В данном случае, 15:30,  означает 15:30 сегодняшнего дня

0:02:22.640,0:02:25.780
Формат времени может быть и вот таким.

0:02:26.040,0:02:27.900
Временную зону я здесь нигде не указал .

0:02:28.020,0:02:28.920
Ну тут все просто. 

0:02:28.920,0:02:31.500
Если временной зоны нет она берётся текущая

0:02:31.700,0:02:32.900
Пойдемте дальше

0:02:33.160,0:02:37.320
Как в самом Git, так и в различных руководствах часто используется такой формат:

0:02:37.320,0:02:41.620
то есть, указывается не конкретная дата или время, а интервал

0:02:41.820,0:02:45.880
Здесь это 3 недели. Но могут быть часы, дни, месяцы, и так далее...

0:02:46.280,0:02:49.320
Git воспринимает это, как относительную дату

0:02:49.400,0:02:54.080
То есть в данном случае - 3 недели назад от текущего момента.

0:02:54.080,0:02:55.340
Здесь важно понимать, 

0:02:55.440,0:02:57.360
что все эти записи идентичны 

0:02:57.560,0:03:00.780
то есть я могу указать, например, 3 дня

0:03:00.800,0:03:02.580
Mогу кстати без 's'

0:03:02.580,0:03:06.900
то есть в единственном числе.
Это тоже сработает, для Git нет разницы

0:03:06.900,0:03:09.560
А могу указать 3 точка

0:03:09.720,0:03:10.620
дней 

0:03:10.620,0:03:12.300
вот так, то же самое

0:03:12.300,0:03:14.320
Точку часто используют для удобства

0:03:14.500,0:03:16.800
потому что с ней, вокруг даты, не нужны кавычки

0:03:16.800,0:03:18.820
Ну а что касается слова 'ago' 

0:03:18.820,0:03:20.720
которое также часто используют

0:03:20.720,0:03:22.160
то это чисто украшательство 

0:03:22.320,0:03:25.160
можно вместо него записать например 'бла-бла-бла'...

0:03:25.160,0:03:26.160
одно и то же

0:03:26.320,0:03:28.320
Git это игнорирует

0:03:28.820,0:03:30.160
Вот еще пример 

0:03:30.360,0:03:32.960
Git позволяет указывать более комплексный промежуток

0:03:33.040,0:03:35.600
В данном случае - это 1 год и 2 месяца с лишним 

0:03:35.800,0:03:37.160
от текущего момента

0:03:37.620,0:03:40.260
Вместо цифр я могу указывать их названия

0:03:40.380,0:03:43.680
0 - 'zero', 'one, two, three'... и так далее 
до 10 

0:03:43.860,0:03:46.140
А вот больше оно считать не умеет

0:03:46.140,0:03:47.820
И еще подобное баловство 

0:03:47.820,0:03:49.780
Например 'yesterday' - это вчера

0:03:49.940,0:03:51.660
Опять же, обращаю ваше внимание 

0:03:51.760,0:03:53.080
что не вчера вечером 

0:03:53.280,0:03:55.640
не вчера утром, а вчера в то же время 

0:03:55.700,0:03:57.900
то есть ровно 24 часа назад

0:03:57.900,0:03:59.980
Впрочем, если нам нужно вчера утром

0:04:00.220,0:04:01.640
Это также легко устроить

0:04:01.840,0:04:03.540
Вчера. И давайте, например

0:04:03.680,0:04:05.680
в 3 часа

0:04:05.900,0:04:08.760
И вот commit-ы до 3-х часов утра

0:04:09.000,0:04:10.960
Также есть другие специальные слова

0:04:10.960,0:04:12.920
например, 'midnight' - полночь

0:04:13.160,0:04:14.620
'noon' - полдень 

0:04:14.700,0:04:17.600
и 'tea' - 5 часов, время чаепития

0:04:18.060,0:04:19.920
Разница между этими словами

0:04:20.140,0:04:21.740
 и указанием времени напрямую

0:04:21.900,0:04:23.460
Например, просто 17:00 

0:04:23.780,0:04:26.440
в том, что если сейчас, еще нет этого времени

0:04:26.680,0:04:28.200
то берется вчера

0:04:28.200,0:04:30.600
Иначе говоря, конкретно в нашем примере

0:04:30.840,0:04:32.840
Мы считаем что у нас 12:30. Да? 

0:04:33.060,0:04:34.880
Это меньше чем 17 

0:04:35.180,0:04:37.560
поэтому 'tea' - возьмет вчерашнеe число 

0:04:37.560,0:04:39.000
как здесь и написано

0:04:39.000,0:04:41.220
Таким образом, эти спец. обозначения 

0:04:41.360,0:04:43.520
гарантируют, что дата никогда не будет в будущем

0:04:43.680,0:04:46.760
Впрочем, на практике, они используются 
довольно-таки редко

0:04:46.920,0:04:48.360
Также из экзотики 

0:04:48.480,0:04:50.300
можно указать ключевое слово 'last'

0:04:50.480,0:04:51.780
и за ней день недели 

0:04:51.960,0:04:53.300
Например, последняя пятница

0:04:53.540,0:04:55.120
Это бывает удобно иногда

0:04:55.120,0:04:57.520
И наконец, 2 последних примера

0:04:57.700,0:04:59.020
'never' - никогда

0:04:59.020,0:05:00.660
и 'now' - сейчас

0:05:00.660,0:05:03.240
Эти обозначения, чаще всего используются 

0:05:03.240,0:05:05.260
когда мы задаем дату экспирации чего-либо

0:05:05.460,0:05:07.200
К примеру, напомню,

0:05:07.380,0:05:09.380
что время хранения записи в 'reflog'-e 

0:05:09.540,0:05:11.040
у нас находится в переменной 

0:05:11.120,0:05:13.060
'gc.refLogExpire'

0:05:13.060,0:05:15.860
По умолчанию она задана в относительном формате

0:05:15.940,0:05:17.140
и равна 90 дней

0:05:17.200,0:05:18.960
то есть при чистке мусора

0:05:19.120,0:05:20.100
из текущего момента

0:05:20.180,0:05:21.720
вычитаются 90 дней

0:05:21.800,0:05:23.860
Все более старые записи удаляются 

0:05:24.080,0:05:26.080
а более свежие остаются

0:05:26.460,0:05:28.460
Давайте заменим это на 'never'

0:05:29.080,0:05:31.480
Технически 'never' означает нулевой timestamp 

0:05:31.900,0:05:32.840
иначе говоря

0:05:32.980,0:05:35.060
 1-го января 1970-го года

0:05:35.360,0:05:36.880
так что, опять же, технически

0:05:37.040,0:05:37.940
Указав 'never' 

0:05:38.040,0:05:40.300
Мы говорим Git что нужно удалять записи 

0:05:40.480,0:05:42.240
до 970-го года

0:05:42.280,0:05:44.580
но таких записей древних у нас и так нет

0:05:44.780,0:05:46.660
поэтому не удаляется ничего

0:05:46.720,0:05:49.080
Вот с этой целью указывается 'never'

0:05:49.280,0:05:51.720
Для 'never' есть противоположное значение 

0:05:51.840,0:05:52.660
'now'

0:05:52.660,0:05:55.140
которое обычно используется чуть в другом виде 

0:05:55.300,0:05:55.960
например

0:05:56.220,0:05:58.480
я хочу наоборот, удалить все записи из 'reflog'-а

0:05:58.720,0:06:01.140
Для этого я запускаю 
'git reflog'

0:06:01.540,0:06:03.440
команда 'expire' - удалить

0:06:03.680,0:06:05.140
к ней параметр

0:06:05.140,0:06:06.900
дата до которой нужно удалить

0:06:06.900,0:06:09.660
В нашем случае все, то есть до 'now'

0:06:09.860,0:06:13.220
И 'all' - означает что нужно по всем ссылкам пройти

0:06:13.260,0:06:15.260
Для всех ссылок такую операцию сделать

0:06:15.720,0:06:16.940
Обычно

0:06:17.040,0:06:19.020
'now' означает текущий момент

0:06:19.020,0:06:22.100
но когда оно используется для задания даты экспирации

0:06:22.400,0:06:24.400
то в Git есть небольшой внутренний hack

0:06:24.400,0:06:26.740
'now' означает очень большую дату, в будущем

0:06:26.820,0:06:28.140
то есть, в данном случае 

0:06:28.400,0:06:30.460
мы хотим удалить все записи

0:06:30.660,0:06:32.480
до некой большой даты в будущем

0:06:32.640,0:06:34.180
то есть вообще все

0:06:34.200,0:06:36.320
Или вместо 'now' можно указать 'all' 

0:06:36.560,0:06:38.660
это такой исторический псевдоним для 'now' 

0:06:38.820,0:06:41.220
который действует только в датах экспирации 

0:06:41.340,0:06:43.260
и если я сейчас это запущу

0:06:43.320,0:06:45.320
то все 'reflog'-и будут очищены

0:06:45.560,0:06:47.500
Вот пожалуй все основные примеры. 

0:06:47.500,0:06:48.900
Как задать дату для Git. 

0:06:49.100,0:06:51.140
Как видите есть некоторые тонкости

0:06:51.360,0:06:54.380
но зная их, можно работать достаточно комфортно

0:06:54.500,0:06:57.160
Далее мы обсудим форматы вывода
