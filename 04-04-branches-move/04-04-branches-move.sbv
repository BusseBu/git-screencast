0:00:00.069,0:00:02.069
Теперь рассмотрим более сложную ситуацию.

0:00:02.889,0:00:09.300
Предположим, что мы уже сделали пару коммитов - совершенно тех же, что и в прошлых выпусках - но в master вместо fix.

0:00:09.900,0:00:14.000
И теперь с запозданием понимаем, что зря сделали их в основной ветке.

0:00:14.600,0:00:18.520
К счастью, никакой проблемы в этом нет. Сейчас мы все исправим.

0:00:19.000,0:00:22.000
Для начала создадим новую ветку fix на текущем коммите.

0:00:22.600,0:00:27.680
Теперь, если задуматься, все, что нам нужно, - это передвинуть master назад, вот сюда.

0:00:28.300,0:00:31.180
В результате последние коммиты окажутся только в ветке fix.

0:00:31.600,0:00:36.620
А общая картина при этом станет такой же, какую мы уже видели ранее в предыдущих выпусках,

0:00:36.660,0:00:39.800
когда мы с самого начала делали эти коммиты в ветке fix.

0:00:40.780,0:00:45.180
Для переноса веток в Git есть несколько команд, которые обладают разными особенностями,

0:00:45.180,0:00:47.600
в различных ситуациях полезны и дополняют друг друга.

0:00:48.080,0:00:54.120
Мы изучим их по ходу скринкаста. Ну а прямо сейчас воспользуемся командой, которую мы уже знаем - git branch.

0:00:54.600,0:01:01.500
Вместе с именем ветки ей можно передать коммит. Тогда она создаст ветку с данным названием, указывающую на него.

0:01:01.500,0:01:06.020
Здесь эта команда, конечно, как видите, не сработала, потому что ветка master уже есть.

0:01:06.420,0:01:11.080
Чтобы это обойти, добавим флаг --force или, коротко, -f.

0:01:11.580,0:01:14.600
Он заставит git branch создать ветку, если ее нет

0:01:14.600,0:01:18.400
или, как в нашем случае, переместить ее, если она существует.

0:01:18.740,0:01:20.260
Давайте попробую.

0:01:20.260,0:01:25.280
Ошибка, потому что git branch требует, чтобы мы сначала ушли из ветки, перед тем как ее менять.

0:01:25.280,0:01:26.760
Вот теперь запускаю...

0:01:26.760,0:01:31.380
Cработало. Ветка мастер указывает на предыдущий коммит и то, что мы как раз хотели сделать.

0:01:31.500,0:01:34.140
Теперь новые коммиты находятся только в ветке fix.

0:01:34.440,0:01:37.620
Как видите, буквально пара команд: создать ветку и передвинуть.

0:01:38.260,0:01:44.800
Если передумали, можно переместить обратно: git branch --f. Пусть master указывает туда же, куда и fix.

0:01:45.100,0:01:49.860
Заметим, что в этой команде я вместо идентификатора коммита указал название ветки.

0:01:50.480,0:01:56.160
В этом ничего особого нет. Ветка технически не может указывать на другую ветку, только на коммит.

0:01:56.620,0:02:01.860
А как я этот коммит передал - идентификатором или через ссылку - значения не имеет.

0:02:02.900,0:02:07.400
Для той же цели вместо git branch иногда бывает удобнее использовать команду git checkout.

0:02:07.920,0:02:14.440
Мы уже использовали флаг -b. Он позволяет создать ветку с данным названием на указанном коммите, и переключиться на нее.

0:02:14.700,0:02:21.880
А если сделать -B, то, если такая ветка уже есть, он ее передвинет, а потом переключится.

0:02:21.880,0:02:26.300
То есть это то же самое, что git branch с ключом -f, а потом git checkout.

0:02:26.780,0:02:27.840
Запускаю...

0:02:27.840,0:02:33.600
Готово. Ветка master перемещена, мы на нее переключились - и в результате опять же те коммиты,

0:02:33.600,0:02:38.200
которые по ошибке были сделаны в ветке master, теперь находятся на ветке fix.

0:02:38.500,0:02:41.820
То есть получили то же самое, как если бы коммитили в fix сразу.
