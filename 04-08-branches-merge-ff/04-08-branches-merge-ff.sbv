0:00:00.420,0:00:02.600
Итак, давайте продолжим разработку.

0:00:02.940,0:00:08.060
В этом выпуске мы посмотрим следующие типичные действия с ветками, а именно - их объединение.

0:00:08.580,0:00:12.440
Ветка fix была сделана ранее для исправления ошибки ветки master.

0:00:12.740,0:00:14.560
Сейчас это исправление завершено. 

0:00:14.780,0:00:19.580
И я собираюсь добавить изменения, которые там сделаны, в нашу основную ветку master.

0:00:19.960,0:00:25.360
Чтобы это сделать, давайте вначале переключимся на нее: "git checkout master".

0:00:26.120,0:00:29.140
Мы хотим сюда добавить изменения из ветки fix.

0:00:29.640,0:00:35.480
Для этого в Git есть команда git merge, она осуществляет так называемое слияние веток.

0:00:35.800,0:00:38.540
У этой команды есть много возможностей и аргументов.

0:00:38.740,0:00:43.920
Сейчас мы рассматриваем самый простой способ ее применения, а к более сложным перейдем в будущем.

0:00:44.220,0:00:48.860
Указываем, из какой ветки мы хотим добавить изменения, - в нашем случае, из fix.

0:00:49.860,0:00:56.860
Готово. Как мы можем видеть в редакторе, изменения, которые были сделаны на ветке fix, теперь находятся у нас в ветке master.

0:00:57.220,0:01:00.780
Давайте прочитаем вывод команды merge: он описывает произошедшее.

0:01:01.100,0:01:06.820
И для лучшие иллюстрации временно вернемся на картинке справа на состояние, предшествовавшее слиянию.

0:01:07.280,0:01:09.580
На первой строке указано, что с чем сливаем.

0:01:09.920,0:01:16.400
Вот этот коммит был вершиной ветки master, а вот этот коммит - последний в ветке fix.

0:01:16.800,0:01:21.200
Следующая строчка содержит название алгоритма, использованного при слиянии. 

0:01:21.480,0:01:26.460
То есть, каким именно способом Git будет добавлять изменения в master из ветки fix.

0:01:26.920,0:01:31.320
Fast forward или, по-русски, «перемотка» - это один из самых простых алгоритмов. 

0:01:31.620,0:01:37.960
И он довольно забавный, потому что при нём не изменения из ветки fix как-то добавляются в master, а наоборот,

0:01:38.020,0:01:42.400
указатель master передвигается так, чтобы указывать на тот же коммит, что и fix.

0:01:42.860,0:01:47.060
Иначе говоря, вот была ветка master, как к ней добавить новые изменения из fix?

0:01:47.440,0:01:52.820
Да просто перенести соответствующий указатель вперед - и все, новые коммиты уже в master.

0:01:53.560,0:01:59.220
Так как теперь master и fix указывают на один коммит, видите, я делаю checkout, и ничего не меняется.

0:02:00.160,0:02:05.700
Предположим, что мы передумали, в ветке fix оказались какие то недочеты, и мы хотим вернуть master назад.

0:02:06.240,0:02:11.400
Без проблем, в Git вообще есть куча способов, как откатить изменения, вернуть все, как было.

0:02:11.700,0:02:17.100
В данной ситуации нам может помочь команда, которую мы уже видели: git branch -f.

0:02:17.400,0:02:19.880
Попросим ее передвинуть ветку master обратно.

0:02:20.740,0:02:26.680
Впрочем, в реальной жизни мы наверняка уже забыли конкретный идентификатор коммита, на котором раньше была ветка master.

0:02:27.040,0:02:29.680
Идентификаторы коммитов вообще, как правило, никто не помнит.

0:02:30.020,0:02:32.800
К счастью, специально на этот случай Git нас страхует.

0:02:33.080,0:02:40.160
Команда merge перед переносом ветки записывает старый идентификатор в файл в директории ".git/ORIG_HEAD".

0:02:40.600,0:02:48.040
И мы можем использовать его в качестве ссылки: "git branch -f master ORIG_HEAD" - переносим мастер обратно на ORIG_HEAD.

0:02:49.420,0:02:51.240
Готово, master вернулся обратно.

0:02:51.680,0:02:54.620
При этом, в редакторе мы сейчас никаких изменений не видим,

0:02:54.620,0:02:58.400
потому что находимся на ветке fix, а команда branch поменяла ветку master.

0:02:58.780,0:03:04.580
Но если мы на нее переключимся - то вот, действительно, предыдущее состояние проекта. Все, как было.

0:03:04.900,0:03:10.480
Попробуем перенести ветку обратно:"git branch -f master", пусть указывает туда же, куда и fix.

0:03:10.980,0:03:14.800
Ошибка. Git branch не умеет переносить ветку, на которой мы сейчас находимся.

0:03:15.100,0:03:20.960
Можно либо уйти из нее, либо для переноса ветки воспользоваться командой checkout, которая менее привередлива.

0:03:21.380,0:03:27.460
Напомню, ключ -B создает ветку с таким названием, указывающую на этот коммит,

0:03:27.480,0:03:30.120
и затем, когда ветка создана, переключает на нее.

0:03:30.640,0:03:33.860
Ну а если ветка уже существует, тогда она передвигается.

0:03:35.080,0:03:39.900
Так как я и так нахожусь на ветке master, то переключения не произошло, ветка только была передвинута.

0:03:40.440,0:03:43.680
В результате, мы, что забавно, получили тот же результат, 

0:03:43.680,0:03:47.640
что и после вызова команды git merge, но, видите, с использованием checkout.

0:03:48.180,0:03:52.260
Это, конечно, в данном конкретном случае, а вообще команда merge более мощная.

0:03:52.560,0:03:57.020
Здесь достаточно было перенести ветку, чтобы добавить изменения из fix в master,

0:03:57.040,0:03:59.780
а более сложный пример мы рассмотрим позже в отдельном выпуске.
