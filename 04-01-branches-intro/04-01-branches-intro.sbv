0:00:06.190,0:00:07.720
Всем привет!

0:00:07.720,0:00:13.799
ветвление одна из важнейших концепций, без которой немыслимо современное использование гит. Ветка - это по сути

0:00:14.139,0:00:19.169
изолированный поток разработки, в котором можно делать коммиты так, что их не видно из других веток

0:00:19.420,0:00:25.500
в этом выпуске я обрисую их использование в общих чертах, а начиная со следующего, мы поработаем с ними на практике

0:00:26.769,0:00:29.159
ветки сопровождают нас с самого начала проекта

0:00:29.500,0:00:35.369
как только мы делаем первый коммит гит создает первую ветвь в разработке, она называется мастер

0:00:36.190,0:00:42.180
дальше мы можем не обращая на это внимание делать еще коммит и еще, в общем, вести разработку проекта

0:00:42.700,0:00:45.599
а теперь, представим на минуту, что к нам в голову пришла идея

0:00:45.969,0:00:51.389
добавить какую-то совершенно новую функциональность и это требует времени, мы хотели бы работать над новой

0:00:51.789,0:00:58.589
функциональностью эпизодически и пока она не завершена, не смешивать наш экспериментальный код с основным стабильным кодом проекта

0:00:58.809,0:01:04.139
как раз для этого очень удобны ветки, мы можем оставаясь в рамках того же проекта, того же

0:01:04.330,0:01:08.519
репозитория, создать новую ветвь разработки и назвать её, например, "feature"

0:01:08.890,0:01:13.290
в гит есть понятие текущей ветки, то есть ветки, с которой мы работаем в данный момент

0:01:13.869,0:01:17.579
соответственно, мы делаем "feature" нашей текущей веткой и коммитим уже в ней

0:01:18.070,0:01:24.839
один коммит , другой коммит и так далее. Гит позволяет легко переключаться между ветками, так что мы можем в любой момент вернуться

0:01:25.030,0:01:32.309
к нашей основной ветке мастер, которой соответствует предыдущее состояние проекта без коммитов, связанных с реализацией новой идеи и

0:01:32.710,0:01:36.809
продолжить разработку в ней. Потом мы можем что-то еще поделать по нашей новой идее

0:01:37.329,0:01:39.329
переключиться обратно на мастер

0:01:39.610,0:01:45.599
если вдруг новая идея какая-то плохая, то мы сможем легко удалить эту всю ветку без какого-либо вреда для

0:01:45.790,0:01:50.309
основной стабильной разработки проекта, но, надеюсь, что гораздо чаще будет другая ситуация,

0:01:50.560,0:01:56.939
что новые изменения хорошие, и когда мы доделаем, то сможем объединить их с нашей стабильной веткой мастер

0:01:57.460,0:02:03.689
такой подход к разработке называют тематические ветки, новую функциональность мы реализуем в отдельных ветках

0:02:04.360,0:02:06.360
и интегрируем в мастер, когда она готова

0:02:06.520,0:02:11.940
при этом параллельно с веткой "feature" могут быть и другие тематические ветки, связанные с другим функционалом

0:02:12.500,0:02:14.250
например, и "another-feature"

0:02:14.250,0:02:16.250
разные ветки могут делать разные люди

0:02:16.470,0:02:23.330
например, "feature" делаю я, а "another-feature" мой коллега и мы друг другу никак не мешаем, потому что каждый разрабатывает в своей ветке

0:02:23.670,0:02:29.360
но при этом, если захочу вдруг посмотреть, что он там сделал хорошего, я могу легко переключиться на его ветку,

0:02:30.090,0:02:37.580
посмотреть, может быть, даже поправить чего-то, а потом вернуться назад, так что, и для командной разработки концепция веток очень и очень удобно

0:02:38.520,0:02:41.059
конечно, это не единственный способ использование веток

0:02:41.430,0:02:46.820
еще один распространенный подход - это использование веток для одновременной поддержки различных версий проекта

0:02:48.270,0:02:51.829
опять же, как ранее ведем разработку, коммит, еще коммит и

0:02:52.260,0:02:56.000
мы решаем сделать релиз, в проекте у нас наверняка есть еще много

0:02:56.160,0:03:03.229
возможностей и перед релизом мы должны решить, что именно мы доделываем и включаем в релиз, а что будем публиковать уже в последующих версиях

0:03:03.480,0:03:11.420
для нового релиза мы создадим отдельную ветку, назовем его версия 1.0, с этого момента наша разработка распадается на два потока

0:03:12.060,0:03:17.839
в ветке мастер мы продолжим делать новые фичи, а в ветке 1.0 мы будем шлифовать те возможности, которые

0:03:18.030,0:03:21.049
решено включить релиз, но ничего нового писать не будем

0:03:21.840,0:03:22.620
далее я

0:03:22.620,0:03:30.230
переключаюсь на ветку 1.0 или передаю ее коллеге и он делает в ней коммит, еще коммит, в общем, готовит ее к релизу

0:03:30.630,0:03:37.189
при этом так как гит позволяет легко переключаться между ветками параллельно может идти разработка новых возможностей в мастере и

0:03:37.709,0:03:40.129
конечно бывают ситуации когда какая-то ошибка

0:03:40.590,0:03:47.479
существовала еще до разделения веток и сейчас ее нужно исправить и в мастере и версии 1.0, что же нет проблем

0:03:47.850,0:03:52.159
исправим эту ошибку в одной из веток, как правило, исправления делается сначала в мастер

0:03:52.500,0:04:00.320
например, пусть вот этот коммит содержит исправления ошибки, а затем гит позволяет сделать так называемый "cherry-picking", то есть взять любой коммит и

0:04:00.510,0:04:08.269
применить его изменения к другой ветке, в нашем случае к 1.0. В итоге, ошибка будет исправлена и там, и там, и так далее мы продолжаем

0:04:08.610,0:04:13.639
разработку добавляем новый функционал в мастер и вот приходит время делать релиз 2.0

0:04:14.400,0:04:16.700
аналогичным образом делаем для него отдельную ветку

0:04:17.070,0:04:24.409
там идет шлифовка тех возможностей, которые решено опубликовать в 2.0 а в мастер то, что предназначено для следующих релизов и

0:04:24.720,0:04:26.139
так далее

0:04:26.139,0:04:30.989
итак, ветки позволяют держать в одном репозитории одновременно несколько версий проекта

0:04:31.990,0:04:39.359
переключаться между ними и дорабатывать каждую из них независимо, при этом можно создавать любое количество веток начиная с любого коммит

0:04:39.789,0:04:42.719
например, от ветки 1.0 может исходить ветка

0:04:43.180,0:04:44.020
1.1

0:04:44.020,0:04:51.210
такие ветки, которые сейчас описал еще называют релиз ветками и это еще один пример полезного в использовании веток в дополнениях

0:04:51.430,0:04:53.430
тематическим, который я рассмотрел ранее

0:04:54.160,0:04:58.709
важно понимать, что гит сам по себе не требует работы с ветками в том или ином виде

0:04:59.680,0:05:03.989
некоторые проекты используют только тематические ветки, некоторые только релизные

0:05:04.539,0:05:10.529
некоторые их сочетания, в частности, есть известно сочетание этих двух подходов которое называется "git flow"

0:05:10.960,0:05:18.900
все это вы конечно сможете применить и для этого мы далее переходим к практическому использование веток их изучению на примере конкретного

0:05:19.030,0:05:21.030
репозитория гит
