0:00:00.489,0:00:07.169
бывают ситуации, когда уже разрешённый конфликт приходится разрешать еще раз, например, мы начали "rebase"

0:00:07.569,0:00:12.479
несколько коммитов наложили, конфликты в них разрешили, и тут понадобилось "rebase" прервать

0:00:13.179,0:00:15.899
соответственно, при повторном "rebase" будут те же конфликты

0:00:16.299,0:00:21.329
или, сделали обычное слияние, но понадобилось его отменить, чтобы что-то там поправить

0:00:21.970,0:00:29.609
опять же, при повторном слиянии все те же конфликты придется разрешать заново, или немного более сложный пример, если мы сначала

0:00:30.070,0:00:36.509
подтягивали изменение в ветку при помощи слияний, и в этих слияниях были конфликты, и потом решили эту ветку перебазировать

0:00:37.000,0:00:39.989
тогда те же конфликты скорее всего возникнут еще раз

0:00:40.510,0:00:44.550
можно дать и еще примеры, но вы и сами легко увидите, если в процессе разработки

0:00:44.890,0:00:51.270
придется повторно разрешать конфликт второй раз одно и то же никому делать неохота, к счастью, гит умеет автоматически

0:00:51.730,0:00:55.529
делать это сам при помощи механизма? который называется "rerere"

0:00:56.260,0:01:00.030
сокращение от трех английских слов "REuse REcorded REsolution"

0:01:00.579,0:01:01.600
при его включении

0:01:01.600,0:01:09.419
гит будет запоминать, как разрешены конфликты, так что, если тот же конфликт возникнет еще раз, то он будет разрешен автоматически

0:01:09.880,0:01:16.949
для примера возьму репозиторий, с которым мы уже работали ранее, первым делом необходимо "rerere" включить "git config rerere.enabled true"

0:01:17.409,0:01:19.409
"git config rerere.enabled true"

0:01:19.810,0:01:22.019
теперь совершим слияние с веткой мастер 

0:01:22.570,0:01:29.759
у нас возник конфликт и обращаю ваше внимание на это сообщение,  оно как раз появляется только, если включен механизм "rerere" и

0:01:30.130,0:01:35.850
означает, что "rerere" запомнил текущее состояние index.html до разрешения конфликта

0:01:36.549,0:01:38.969
теперь зайдем в редактор и исправим конфликт

0:01:40.730,0:01:44.439
такой будет index.html и давайте добавим его в index и

0:01:44.900,0:01:51.490
завершим слияния, готово, и мы видим также еще одно сообщение, которое появляется только при включенном "rerere"

0:01:51.920,0:01:56.020
она как раз означает, что гит запомнил, как именно был разрешен данный конфликт

0:01:56.900,0:02:01.150
теперь допустим я обнаружил, что что-то не так и слияние произведено рановато

0:02:01.670,0:02:05.559
что же, придется его отменить, откачусь на один коммит назад

0:02:05.930,0:02:13.570
дальше могу внести какие-то изменения в ветку "feature" или в мастер или в обе этих ветки с точки зрения "rerere" они не важны

0:02:13.940,0:02:16.089
если не затронут именно сам конфликт

0:02:16.790,0:02:21.129
то есть если в будущем будет в точности такой же конфликт в том же файле

0:02:21.470,0:02:28.359
то "rerere" cработает? а прочие изменения не имеют значение. Для простоты давайте сразу перезапущу слияние еще раз

0:02:29.090,0:02:36.190
вроде все тоже самое, но вот небольшое сообщение, в котором "rerere" говорит о том, что конфликт разрешен автоматически

0:02:36.500,0:02:41.770
используя запомненный раннее результат и, если мы посмотрим index.html, то действительно

0:02:42.620,0:02:44.090
конфликта нет

0:02:44.090,0:02:50.830
то есть "rerere" применяет к файлу запомненное разрешение конфликта, но по умолчанию не добавляет его в index

0:02:51.140,0:02:56.440
вообще можно включить автодобавление в index при помощи "git config rerere.autoUpdate true"

0:02:57.140,0:03:02.380
такая настройка конфига тогда "rerere" будет не только исправлять конфликт, но индексировать

0:03:02.840,0:03:10.239
с другой стороны возможно лучше без нее, так мы явно видим файлы с конфликтами и можем убедиться, что конфликты разрешены верно и

0:03:10.400,0:03:14.290
если так, то добавить файлы в index и завершить слияние как обычно, а

0:03:14.570,0:03:20.019
что, если нет, если ранее запомненное разрешение конфликта теперь не актуально и нам не подходит

0:03:20.450,0:03:24.220
тогда можно получить файл с конфликтом используя "git checkout --merge index.html"

0:03:25.010,0:03:29.529
вызвать "git rerere forget index.html", чтобы забыть старое разрешение конфликта по этому пути

0:03:29.900,0:03:33.730
без этого rerere не запомнит новое, которое мы сейчас сделаем и

0:03:34.250,0:03:36.399
далее исправить его так, как теперь считаем нужным

0:03:38.360,0:03:44.919
например, давайте у нас теперь будут эти вызовы не вместе, а отдельно, то есть вот такой будет index.html и

0:03:46.100,0:03:48.399
завершаем слияние еще раз, готово

0:03:49.730,0:03:56.500
сейчас мы видели пример rerere с команды "merge", но в гит есть разные команды, которые выполняют слияние файлов

0:03:57.140,0:04:02.019
rerere автоматически срабатывает и для них, например, давайте сейчас сделаем

0:04:02.569,0:04:04.519
перебазирование "feature" на мастер

0:04:04.519,0:04:06.230
напомню, что по умолчанию

0:04:06.230,0:04:12.160
перебазирование пропускает слияние, так что перебазированы  поверх текущего мастера будут вот эти два коммита

0:04:13.640,0:04:19.869
первый коммит, как видно, перебазирован на мастер успешно, а потом при перебазирование второго возник конфликт

0:04:20.209,0:04:26.499
он совершенно точно такой же как ранее при слиянии, потому что мы одни и те же изменения накладываем друг на друга

0:04:26.960,0:04:34.389
просто тогда это делала команда "merge", а сейчас команда "rebase", но для "rerere" нет никакой разницы конфликт один и тот же

0:04:34.700,0:04:36.700
поэтому он смог его разрешить

0:04:37.190,0:04:39.139
давайте файл посмотрим

0:04:39.139,0:04:46.029
да конфликта нет, такое разрешение нам подходит, остается добавить его в index и завершить перебазирование

0:04:48.410,0:04:52.929
гит хранит все данные по конфликтам "rerere" в такой вот служебной директории

0:04:53.240,0:04:59.289
больше там ничего нет, поэтому, если мы хотим вдруг все разрешенные конфликты забыть, то можно её просто удалить

0:04:59.690,0:05:04.149
также гит удаляет старые разрешенные конфликты автоматически при сборке мусора

0:05:04.520,0:05:11.200
если они старше чем такая переменная конфига, по умолчанию 60 дней, а данные по конфликтам которые не были разрешены

0:05:11.630,0:05:14.619
старше, чем такая переменная по умолчанию 15 дней

0:05:15.560,0:05:22.329
если rerere надоел, и мы хотим его отключить, вновь решать конфликты самостоятельно, то можно либо поставить

0:05:22.639,0:05:26.739
настрою конфиг false, либо можно просто ее удалить

0:05:27.080,0:05:33.010
но тогда вместе с удалением этой настройки конфига, нужно обязательно также убить соответствующую директорию

0:05:33.139,0:05:35.619
иначе гит подумает, что rerere все еще включено

0:05:36.740,0:05:41.079
также для "rerere" есть специальный скрипт обучения, который идет по веткам

0:05:41.720,0:05:48.459
анализирует коммиты слияния и запоминает предыдущие разрешение конфликтов в том числе и те которые были до включения rerere

0:05:49.130,0:05:53.289
этот скрипт называется "rerere-train", обычно он находится внутри

0:05:53.690,0:06:01.119
инсталляции гит, а именно в поддиректории "contrib", а не по системному пути, у меня это вот здесь, у вас может быть где-то другом месте

0:06:01.640,0:06:06.569
ему передается коммит от которого идти или "--all", чтобы он прошелся по всем веткам

0:06:07.510,0:06:12.569
заметим, что в данном случае эта команда ничего не сделала, поскольку как видно на картинке справа

0:06:12.910,0:06:20.130
после перебазирования ни в одной из веток нет слияний, но на практике бывает, что конфликт, который нас интересует

0:06:20.560,0:06:28.380
находится в уже недостижимом коммите, тогда можно передать его явно, в нашем случае мы как раз только что со старого слияния

0:06:28.780,0:06:32.220
перебазировались поэтому можем указать на него через "reflog" и

0:06:33.100,0:06:37.140
вот тут много вывода из особенности скрипта, но, в общем, он научился

0:06:38.140,0:06:41.520
соответственно в жизни если мы работаем с выключенным "rerere", но вдруг

0:06:41.920,0:06:47.369
понадобилось разрешить тот же конфликт заново, то можно либо передать этому скрипту все ветки через --all,

0:06:47.800,0:06:53.700
либо, если коммит со старым разрешением конфликта уже не достижим, то можно передать свое как-то иначе через

0:06:54.100,0:07:00.929
идентификатор или как вот я сделал через "reflog" и затем уже "rerere" будет аналогичные конфликты разрешать автоматически

0:07:01.420,0:07:03.659
также как я уже говорил при сборке мусора "rerere"

0:07:04.600,0:07:08.580
удаляет старые разрешение конфликтов по умолчанию старше 60 дней

0:07:09.130,0:07:14.609
а "rerere.train", если сохранились соответствующие коммиты может считать их заново, то есть восстановить

0:07:15.340,0:07:20.399
в заключении замечу, что скрипт и "rerere.train" написан на языке оболочки "sh"

0:07:21.070,0:07:27.239
поэтому под windows будет работать при запуске через gitbash, но не из powershell или cmd
