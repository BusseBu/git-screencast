0:00:05.680,0:00:09.179
Hello everyone. In this video we are going to learn the basics of git.

0:00:09.280,0:00:15.720
Currently Im in the editor and I have a project directory opened, that only has the index.html file inside it.

0:00:15.900,0:00:19.000
If you are not familiar with HTML its completely ok.

0:00:19.000,0:00:26.160
This screencast doesn't require any HTML knowledges. So you can imagine its any other programming language you like or just a plain text.

0:00:26.580,0:00:29.760
Lets add git versioning to this project.

0:00:30.400,0:00:33.660
"git init" command creates an empty repository.

0:00:34.000,0:00:41.000
The ".git" directory that is in the root of the project contains the database and all the git settings.

0:00:41.520,0:00:45.520
If we decide to get rid of git we can just delete this ".git" directory.

0:00:46.380,0:00:48.960
Right after "git init" the git repository is empty,

0:00:49.140,0:00:52.800
and first of all we add our "index.html" file to it.

0:00:53.060,0:00:58.160
One of the important features of git is that adding changes is done in 2 steps.

0:00:58.460,0:01:02.600
I've rearranged the position of my editor and console to make it more explicit.

0:01:02.780,0:01:08.080
The console and the editor are above and the result of the executed commands is below.

0:01:08.460,0:01:10.980
There is 3 zones in the result area.

0:01:11.360,0:01:16.420
First - a working directory. Now it has "index.html" file only inside it.

0:01:16.420,0:01:19.440
The next two zones belong to the git repository.

0:01:19.740,0:01:24.660
Their data is inside the .git directory.
So its a sort of logical separation.

0:01:24.820,0:01:29.580
Index[the git index, not index.html] stores the list of working directory files, tracked by the git.

0:01:29.580,0:01:32.860
currently its empty as git repository have been just created.

0:01:33.200,0:01:39.420
We are going to add "index.html" to the Index now. 
Однако скоро мы добавим туда "index.html"
Also Index is an intermediate storage of changes.

0:01:39.680,0:01:44.280
So, when we want to add any changes to git we add them to the Index first.
Когда мы хотим внести какие-то изменения в git, то мы сначала добавляем их в индекс,

0:01:44.400,0:01:49.700
And when we finish something we add the changes from the Index to the third zone,

0:01:49.860,0:01:55.540
that is denoted as its own repository. And here is where the whole history of the project is stored.

0:01:55.660,0:01:58.040
We are going to see how its done in our case shortly.

0:01:58.720,0:02:05.060
First, lets run the "git status" command. It shows the status of our project files from the git perspective.

0:02:05.520,0:02:11.640
Right now we have an "index.html" file in our Working Directory, but no data on it in the git Index.

0:02:11.860,0:02:15.820
"git status" marks such files as untracked as they are not being tracked.

0:02:16.660,0:02:22.680
By the way, my command prompts "1" shows exactly this, that there is 1 file that is untracked now.

0:02:24.020,0:02:27.800
Lets execute "git add" command that will add it to the Index.

0:02:29.680,0:02:31.680
Lets check.

0:02:32.280,0:02:37.000
You see? Now git knows, that we have such a file.
Or, as they say the file have been indexed.

0:02:37.300,0:02:41.960
To finally write it to the repository we use the "git commit" command.

0:02:42.140,0:02:47.740
As you remember git will also save who made the change.

0:02:48.160,0:02:52.920
In one of the previous videos we added exactly this, the user data, using the "git --config" command.

0:02:52.920,0:02:56.200
Without it, comit, will most likely refuse to work.

0:02:56.480,0:03:00.740
Running. And we are in a text editor. Which one? Depends on our settings.

0:03:01.000,0:03:06.320
Let me remind you that we set the core.editor parameter to Sublime in the "configuration" video.

0:03:06.560,0:03:10.400
Here I need to write down what kind of changes am I making to the project.

0:03:10.420,0:03:14.920
Right now Im saving the file to repository. Why do I need it? What kind of file is it? What does it do?

0:03:15.040,0:03:19.900
Later on all this information will be available and one can see how the project was developed.

0:03:20.740,0:03:24.540
this text that you see is auto-generated by the git.

0:03:24.740,0:03:31.080
It collects the changes from the Index and list them here, so that we see what are we going to write down, or as they say "commit".

0:03:31.260,0:03:34.380
In this case we are having one new file.

0:03:34.780,0:03:39.180
Note, that when we write down a message( usually its done above ) and close the editor

0:03:39.660,0:03:43.360
all the lines that are starting with the "#" symbol are going to be removed automatically.

0:03:43.560,0:03:47.040
That means that this autogenerated message if for our information only.

0:03:47.240,0:03:52.640
Keep in mind, that the message that you are writing for the changes you commit can be long and descriptive.

0:03:53.040,0:03:58.840
In real projects with a lots of developers it can be longer, than the saved code itself.

0:03:59.060,0:04:04.180
Also, there are common formating elements, like list should be prefixed with "-" or "*" should be used for bold.

0:04:04.340,0:04:09.860
Most of the time commit is implementing one thing, but if the functionality is so tangled, that you end up with multiple ones,

0:04:09.860,0:04:13.160
you can list all the features that were added.


0:04:13.580,0:04:19.040
It is important that the first line is not very long. Say, up to 50 symbols.

0:04:19.280,0:04:23.340
We dont make dot in the end of it as it should be followed by the new line.

0:04:23.599,0:04:30.199
Thats done because the first line counts like a header of the message and many git commands and web-interface can see this line only.

0:04:30.930,0:04:35.060
Details are usually listed below, like what changes, why do we need them and so on.

0:04:35.430,0:04:39.320
In our case the first commit is very straightforward so Im going to remove these.

0:04:39.840,0:04:42.139
Saving and closing the editor. Hooray!

0:04:42.800,0:04:46.880
We've made our first commit and finally saved the data in our repository.

0:04:47.060,0:04:51.220
If we run the "git status" command it will not show anything.

0:04:51.220,0:04:58.600
That means that the current states of the Working Directory, Index and Repository are in sync.

0:04:58.940,0:05:04.280
Note this hexadecimal number here. Its a hash or so called

0:05:04.320,0:05:08.320
commit identifier, or to be more precise part of it. Full commit identifier is longer.

0:05:08.850,0:05:16.339
We will continue the development further. Add more changed, but this number will always let us to have a look at this exact commit.

0:05:16.470,0:05:22.100
See its changes and who and when did it and see the state of the files at time when this commit was done.

0:05:22.460,0:05:26.400
Lets have a look closely at this hash.

0:05:26.640,0:05:32.860
First part of this number is a type of the object that is being saved to the git. In this case its "100" - a file.

0:05:32.860,0:05:40.220
Be it for instance a symbolic link we would have a different number here. The second part "644" denotes the file permissions.

0:05:40.620,0:05:45.920
Depending on the file system and the operating system the permissions can be the following:

0:05:46.260,0:05:49.960
write, read, execute, to whom the file belongs

0:05:50.480,0:05:58.580
Git doesn't save all the variety of these permissions. Git only cares if this user can execute the file or not.

0:05:58.620,0:06:05.780
If file is executable, we'll see "755" here, if its not it'll be "644".

0:06:05.940,0:06:11.520
This is the only information on user permissions that is stored in the repository. Also note, 

0:06:11.600,0:06:16.780
That if I make a file executable ( under Unix-like system it can be done with the following command ),

0:06:17.120,0:06:24.300
then "git status", see, detects that there are changes in the file. And if I want to I can add it to the Index and commit.

0:06:24.560,0:06:30.540
Changing file permissions is treated by git same way as changes in the content of the file.

0:06:30.780,0:06:34.540
Revoking the execute permissions and git shows that we have no changes.

0:06:35.969,0:06:39.778
The permissions thing is way simpler if you are using git on Windows.

0:06:40.500,0:06:46.020
Windows file systems dont usually support  aseparated file execution right.

0:06:46.240,0:06:50.760
Different to Unix-like systems on Windows its same as read right.

0:06:51.300,0:06:57.480
that assumes that if file can be read it can be executed. Unix-like system distinguish these 2 rights.

0:06:58.080,0:07:04.480
Git is checking if file system supports a separate execution right on repository creation.

0:07:04.480,0:07:10.580
If its not the corresponding setting is set to false. The setting defines if file system settings should be checked at all

0:07:11.040,0:07:16.940
The files that we've saved in git on Windows will not have a execution bit and they are in the "644" mode all the time.

0:07:17.620,0:07:25.240
What if the project, developed on Windows, should also work on Unix-like systems and we need to make file executable?

0:07:26.020,0:07:32.700
You can either setup a repository on a Unix-like system and make it there, or there is the following command:

0:07:33.009,0:07:38.548
it will set the executable bit of the file, directly in the git Index, bypassing the file system where this permission is ignored.

0:07:39.039,0:07:42.808
And then, if you commit it, repository will have the rights set correctly.

0:07:43.329,0:07:46.138
So it will be executed on Unix-like system as rights are set properly now.

0:07:47.079,0:07:53.309
Namely yhis command change the execution rights that are already in the Index. If file is not in the Index yet and we are in a process of adding it there

0:07:53.439,0:07:57.088
then the same flag is also working for the "git add" command

0:07:58.480,0:08:02.360
Later on, to check the commit we'll be able to use the "git show" command,
В будущем, чтобы посмотреть коммит, мы сможем воспользоваться командой git show,

0:08:02.580,0:08:07.740
that is given an identifier or its first letters( 4 letters at least )

0:08:08.000,0:08:13.920
Or we can do without it, then it will show the current commit. I will also add this flag to make it show more information.

0:08:14.799,0:08:20.669
Here we can see the details of the commit. Above is a full identifier, that consists of 40 hexadecimal digits.

0:08:21.039,0:08:28.498
Ignore this part on the right. This is a links to commit information. We will have a look at it later. And theres a funny thing below.

0:08:28.779,0:08:34.888
As I've told you perviously, the commit has the information on who did it and when was it done.
Git took it from the configuration,
Как я ранее говорил, в коммит записывается информация о том, кто и когда его сделал. Git взял её из конфигурации,

0:08:35.080,0:08:41.600
but git assumes that 2 people can participate in commit: author and comitter.

0:08:41.860,0:08:48.560
Author - the one who created these changes, wrote the code and the corresponding authorship date of when it was done.

0:08:49.200,0:08:54.480
Its possible, that the author has no write permissions to this repository and he/she have just sent the code to the developer,

0:08:54.480,0:09:00.740
that has the right to commit. He/she checked the changes and saved them into the project same way as we've just done it.

0:09:01.350,0:09:05.659
So the committer is the one who made a commit in the repository.

0:09:06.000,0:09:13.190
and commit date is when the commit was made. By default committer and author is one and the same person and date is same as well as its assumed that

0:09:13.470,0:09:19.730
I've created the code and committed it, but as I've told you already, other scenarios are possible in which these 2 actors are different persons.

0:09:20.430,0:09:27.079
For example if the project has a source code open and lots of developers are sending changes to the project maintainers

0:09:27.480,0:09:34.159
that are going through the changes and if they fit, commit them to the project. But in this case its important to save the information on the initial author

0:09:34.500,0:09:37.680
as, first of all people should know who wrote the code,

0:09:37.700,0:09:42.660
and second of all, if later, there is a problem with the change, maintainer knew whom to ask for help.

0:09:43.020,0:09:46.820
Git allows to set the author of the commit using the "--author" flag.

0:09:47.240,0:09:52.660
Later goes the author in the same way as its written above. For example, like that and an email here.

0:09:53.580,0:09:57.260
The date of the author can be set with the "--date" flag. Commit with these parameters 


0:09:57.779,0:10:04.249
will set me as a committer and the commit date will be current, but the author and the authors date will be set as we've specified it.

0:10:04.560,0:10:11.479
These flags are changing namely author, not the committer. But you can change anything, using these environment variables

0:10:12.120,0:10:18.079
so, technically one can write a commit from Santa Claus, made on Christmas, but this is rarely needed in real projects.

0:10:19.290,0:10:25.339
Note, that even if you are not going to set these kind of flags, we'll have a look at the commands that are

0:10:25.620,0:10:33.349
copying commit and movinc the commits. But the authors information remains the same and committer is, usually being changed to the one who have executed the command.

0:10:33.800,0:10:40.460
So if you work together with some kind of colleagues of yours and use their commits and move them

0:10:40.700,0:10:44.080
committer is changed to you and author remains the same.

0:10:44.250,0:10:49.429
We are going to have a look at it later. Now we only need to understand that git makes a difference between 

0:10:49.829,0:10:52.549
the author of the code and the person who wrote it to the repository.

0:10:53.639,0:10:57.948
Later "git show" outputs the changes made in this commit. Its quite straightforward:

0:10:58.620,0:11:05.630
new file was added with this content. We'll have a look at this output in more details later, when we make more commits and it will be more interesting.