0:00:00.099,0:00:04.799
В этом выпуске мы разберём исправление последнего коммита при помощи флага --amend

0:00:05.920,0:00:08.550
Предположим, что мой последний коммит содержит ошибки

0:00:09.160,0:00:13.830
При использовании --amend наш первый шаг - это исправить ошибки в рабочей директории

0:00:14.440,0:00:17.100
Допустим, я неправильно указал фразу в index.html

0:00:18.039,0:00:24.569
Затем добавляем обновленные файлы в индекс и для замены коммита запускаю "git commit --amend"

0:00:25.269,0:00:26.529
Открылся редактор

0:00:26.529,0:00:30.299
Описание в нем такое же, как и в заменяемом коммите. Оставляю его, как есть

0:00:30.970,0:00:36.210
Готово! И сейчас я наглядно покажу на картинке справа, что произошло, как именно коммит был заменён

0:00:36.820,0:00:39.059
Команда commit --amend сделала два действия:

0:00:39.309,0:00:44.909
Сначала она передвинула текущую ветку назад, то есть сделала то же самое что и такой вот мягкий reset

0:00:45.399,0:00:52.889
при этом все файлы в рабочей директории, и что важно в индексе, остались как есть. Откатилась только ссылка в репозитории.

0:00:53.320,0:00:57.270
А затем создала из текущего индекса, то есть с учетом последних изменений

0:00:57.969,0:00:59.320
новый коммит

0:00:59.320,0:01:06.750
причем описание, информацию об авторе она взяла из заменяемого коммита. В точности так же как это сделала бы такая команда

0:01:07.030,0:01:09.449
которую мы рассматривали в выпуске про мягкий reset

0:01:10.119,0:01:12.119
Вот так это можно проиллюстрировать

0:01:13.390,0:01:15.540
то есть как я и говорил два в одном

0:01:16.140,0:01:23.320
в результате этот новый коммит стал фактически заменой старому, а предыдущий все еще есть базе, но со временем будет удален

0:01:24.040,0:01:29.640
С этой командой также можно использовать флаг --reset-author, который делает текущего коммитера автором и

0:01:30.000,0:01:32.660
флаг --no-edit который отменяет вызов редактора

0:01:34.320,0:01:37.669
Еще один забавный способ применения --amend это редактирование

0:01:38.130,0:01:42.769
описания коммита, как уже говорилось Git устроен так, что изменить кормить нельзя

0:01:43.079,0:01:50.269
Это касается и описание тоже, поэтому если мы коммит сделали, то описание в нем жестко фиксировано, а что если в нем опечатка?

0:01:50.579,0:01:54.709
Просто запуск commit --amend буквально как здесь написано без дополнительных изменений

0:01:55.350,0:02:02.239
откатит ветку назад и создаст новый коммит на основе текущего индекса, то есть фактически перекоммитит последние изменения

0:02:02.579,0:02:09.409
при этом вызовется редактор. Из него описание можно будет изменить. Ну или можно явно задать его при помощи -m

0:02:10.200,0:02:15.709
У кого-то может возникнуть вопрос: "Нужен ли вообще мягкий reset, если существует commit --amend?"

0:02:16.470,0:02:20.929
Конечно да, нужен! Флаг --amend это быстрая замена текущего коммита,

0:02:21.060,0:02:27.709
а мягкий reset гораздо мощнее. Он позволяет перенести ветку куда угодно, в частности откатиться на 2 коммитa назад

0:02:28.319,0:02:33.649
Видите, теперь мастер здесь, но в рабочей директории и в индексе есть все последние изменения

0:02:34.760,0:02:40.700
Соответственно, можно перекоммитить их и они будут объединены в один коммит. Вот справа я это демонстрирую:

0:02:41.300,0:02:44.760
старая часть ветки отошла в сторону, эти коммиты теперь недостижимы

0:02:44.760,0:02:48.980
но все изменения, которые там были теперь в новом коммите, в вершине мастер

0:02:48.989,0:02:52.849
Однако замечу, что изменения в истории разработки, которые мы только что сделали

0:02:53.549,0:02:58.129
касаются только последних коммитов ветки. Ни мягкий reset, ни commit --amend

0:02:58.459,0:03:02.149
не могут помочь в изменении коммита, который находится где-то посередине других

0:03:02.459,0:03:07.069
То есть поменять к примеру этот коммит, не трогая тот который идет за ним

0:03:08.040,0:03:11.630
Технические подобная замена реализуема только через переписывание ветки,

0:03:11.940,0:03:17.500
начиная от изменяемого коммита и выше. Это уже можно сделать, но для этого нужна другая, более

0:03:17.500,0:03:22.560
специализированная команда, которая занимается именно переписыванием истории "git rebase" 

0:03:22.700,0:03:26.820
Мы обязательно изучим ее в следующих выпусках
