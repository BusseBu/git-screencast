0:00:01.520,0:00:05.220
In the previous issue we've deleted the "feature" branch and then restored it immediately.

0:00:05.420,0:00:09.720
We could accomplish it because we knew the commit on which it was pointing previously.

0:00:10.120,0:00:14.020
In the real life we usually dont keep track of commits identifiers.

0:00:14.380,0:00:17.800
Ref logs will help us to restore the removed branch, even if we forgot the commit id

0:00:17.800,0:00:23.260
and to solve other similar situations, that are going to meet us on our dev path in future.

0:00:23.840,0:00:27.680
Every time when we switch from one branch to another, make commits,

0:00:27.680,0:00:31.240
and, actually in case of any operation that lead to the reference change

0:00:31.300,0:00:38.220
git writes the change to a special file that is called "reflog", abbreviation from "reference log".

0:00:38.700,0:00:41.340
These files are in the "./git/logs" directory.

0:00:41.660,0:00:45.860
For example, reflog for the "HEAD" link is in the ".git/logs/HEAD" file.

0:00:46.140,0:00:47.460
And here's what's inside it.

0:00:47.780,0:00:51.440
Soon we'll have a look at a special command for having a prettier output of these.

0:00:51.840,0:00:54.040
This is just for us to understand how it works.

0:00:54.540,0:00:57.700
With every change of the commit to which the HEAD is pointing

0:00:57.720,0:01:02.240
which occurs when we update the HEAD itself or when we are moving in a corresponding branch,

0:01:02.240,0:01:04.140
new line is added to this file.

0:01:04.460,0:01:11.280
It has commits identifiers, where HEAD was pointing previously, where it is pointing now, who when and why made this changes.

0:01:11.880,0:01:15.980
For a nicer output of reflogs one usually use the "git reflog" command,

0:01:15.980,0:01:20.520
with the link specified, e.g. show the reflog for the master, feature etc.

0:01:21.080,0:01:26.120
And, most of the time command is used with no arguements at all, which results in the reflogs for the HEAD.

0:01:26.640,0:01:33.300
Thats pretty much the same that we've seen in the file already, but printed in a nicer way and in reverse order.


0:01:33.680,0:01:36.780
From the latest changes in the top to older ones in the bottom.

0:01:37.400,0:01:42.740
Have a look, please, you see, in the very bottom, the very first line - its the initial commit.

0:01:43.080,0:01:46.500
Then we made another commit, and HEAD was pointint to it.

0:01:46.720,0:01:52.620
Albeit, strictly speaking, HEAD was not pointing to it directly, but through a branch. But for the reflog it doesnt matter at all.

0:01:53.000,0:01:56.440
Then, lets recall the history of our dev process, we made a feature branch.

0:01:56.860,0:02:02.600
This fact is not reflected in this log at all. Thats because the HEAD is not being changed by the branch creation itself.

0:02:02.960,0:02:07.120
But immediately after that we switched to it, ran the "git checkout" command.

0:02:07.400,0:02:09.920
That have updated the HEAD and heres is the entry reflecting it.

0:02:10.240,0:02:16.340
Then we made some commits in the feature branch and got back to the master. And so on till the merge of fix and master.

0:02:16.740,0:02:19.080
For conciseness, so that the output was not very long,

0:02:19.080,0:02:23.360
I've removed some switches of back and forth from the reflog, right before making this video.

0:02:23.560,0:02:25.760
But all the main operations have remained.

0:02:26.400,0:02:32.900
As you see, our latest actions, namely removing the "fix" and "feature" branches, restoring the "feature"

0:02:33.000,0:02:38.380
are not in this log, as they didnt affect the HEAD in any way. Therefore they are not shown here.

0:02:38.680,0:02:44.220
Lets note that the addiational information on the references, that you see in the parentheses here, has nothing to do with the reflog

0:02:44.380,0:02:48.460
This is so called decoration of the commit identifier, when the information

0:02:48.480,0:02:52.400
on the references that are pointing to it now is added to it.

0:02:52.820,0:02:56.360
That means if I, for instance, will delete the feature branch now, then feature decoration will be removed from here.

0:02:56.680,0:03:01.660
Thats because the information is not stored in the log, it is only shown according to the current state for completeness.

0:03:02.140,0:03:03.640
Now, why do we need reflog?

0:03:04.020,0:03:06.960
In this issue we are going to see 2 ways of using it.

0:03:07.540,0:03:14.220
Forstly, if we, for example, have deleted the "feature" branch a week ago and dont remember what identifiers were there,

0:03:14.260,0:03:19.900
but we needed some commits from it, then the usual git log command will not show it to us.

0:03:20.160,0:03:22.820
They've become unreachable as there's no feature branch any more.

0:03:23.200,0:03:28.140
But as HEAD was pointing to these commits some time ago we can use reflog to find them.

0:03:28.580,0:03:34.200
For example we are looking for the "work" function that was developed in this branch. And heres a latest commit on that.

0:03:34.840,0:03:38.420
We can also find our way by the last checkout from the branch "feature".

0:03:38.420,0:03:41.480
You see, heres when we switched from feature to master for the last time.

0:03:41.920,0:03:49.500
In the reflog entries the commit to which we've switched is shown on the right. In our case at that moment its the tip of the "master".

0:03:49.880,0:03:54.280
And the commit that we've been at before, the old tip of the "feature" is below.

0:03:54.680,0:03:56.220
Lets restore this branch.

0:03:56.500,0:04:01.640
To address the reflog notes one can use the braces, same as its here.

0:04:02.020,0:04:05.280
i.e. "HEAD" "@" and the number of the entry.

0:04:05.420,0:04:10.400
This syntax will get the sixth entry from the reflog and put the corresponding identifier in it.

0:04:11.120,0:04:16.860
In windows in powershell "@" is a special symbol, therefore we have to wrap it in a quotes.

0:04:17.360,0:04:21.780
But it will work fine in the other shells, just like that. Done, the branch is restored.

0:04:22.300,0:04:25.800
Lets note that the "git reflog" command has a number of additional arguements.

0:04:26.020,0:04:28.020
You can check them in the documentation.

0:04:28.340,0:04:34.480
The normal call assumes "show", as showing reflog is whats needed in 90% of the cases.

0:04:35.100,0:04:40.400
But one can delete the entries from the reflog, rewrite the reflogs and check their availability and so on.

0:04:40.680,0:04:50.220
So the usual "git reflog" call is the same as "git reflog show" which is an alias of the "git log --oneline -g" command.

0:04:50.220,0:04:57.680
Which is,actually turns reflog into a special mode in which it prints the commits from the reflog and not from the branch itself.

0:04:58.060,0:05:00.260
You see, the output is exactly same,

0:05:00.320,0:05:05.160
as the command is exactly the same as just calling the "git reflog", just longer.

0:05:05.560,0:05:09.960
By that many parameters of the "git log" command is applicable to the reflog.

0:05:10.280,0:05:13.300
We'll have a look at it in more details in the "git log" command video.

0:05:13.580,0:05:19.240
And here we'll just use one of them, namely --date, to add date output to the reflog.

0:05:19.580,0:05:25.520
This will make the search in the reflog more convenient, as we approximately remember when the changes we are interested in was made.

0:05:25.840,0:05:28.780
As a date format lets take the default iso format.

0:05:29.200,0:05:33.560
For more information on the date formats you can watch a date format dedicated issue.

0:05:34.180,0:05:40.500
And its easy to see the add time of every entry. Now its easier to find the changes that were done a week ago.

0:05:40.900,0:05:45.320
To referr to the entries, I can use date instead of the number in the braces.

0:05:45.540,0:05:55.420
Lets say if the feature was deleted, to restore it I can use the as I've done previously "git reflog HEAD@"
Cкажем если удалена feature, то, чтобы ее пересоздать, я могу использовать аналогично предыдущему reflog HEAD@,

0:05:55.440,0:06:01.720
but instead of the number (6) as we've done before, I can use the date. In this case this one.

0:06:02.360,0:06:08.760
Lets note the space in the date, therefore Im going to put it into quotes, so that git understood it as a whole.

0:06:09.320,0:06:10.240
Done.

0:06:11.080,0:06:17.980
Here its important to understand that such a call is performed through the reflog, so we are looking for the entries
in the reflog with this date.

0:06:18.100,0:06:24.500
If theres noone with this exact date, then the older one that is closest to the one mentioned is used and its commit identifier is taken.

0:06:25.040,0:06:28.760
For it to work its not enough for the git commit to be in git.

0:06:29.120,0:06:34.160
There should also be an entry in the reflog with the right number or in this case with the matching date.

0:06:34.480,0:06:36.940
And we are getting to the next important moment.

0:06:37.220,0:06:39.760
By default reflogs are not growing unlimitedly.

0:06:40.060,0:06:45.560
Most of the time the entry is stored for 90 days and if commit is unreachable - 30.

0:06:45.780,0:06:50.380
So from the moment when we were on the commit we have at least 30 days,

0:06:50.380,0:06:53.300
when we can be sure that this entry is in the reflog for sure.

0:06:53.600,0:06:55.820
And the commit itself will be in the base.
И сам коммит, соответственно, будет в базе.

0:06:56.300,0:07:00.900
The forementioned configuration parameters can be changed, but usually they are left as is.

0:07:01.420,0:07:07.720
So, we've just have a look at the reflog usage for restoring the data, namely for finding the lost commits.

0:07:08.120,0:07:11.540
This is a very important knowledge not only for the deleted branches,

0:07:11.540,0:07:15.900
but for a number of other potentially dangerous operations, that we are going to learn in future.

0:07:16.360,0:07:23.040
There is one more way to get to the reflog, that is used in practice very often, usually together with the "git checkout".

0:07:23.120,0:07:27.000
It looks like that. So its "@" and a negative number.

0:07:27.480,0:07:31.820
This means the previous branch from which we've made the checkout to this one.

0:07:31.980,0:07:38.160
So this checkout command is getting us back to the previous branch, from which we've switched to master.

0:07:38.480,0:07:41.560
Its fun that in our case its not going to work now.

0:07:41.860,0:07:43.020
You see, an error!

0:07:43.280,0:07:47.680
When I was recording this screencast I was surprised at first, but then I've figured it out.

0:07:47.900,0:07:51.120
Most likely if you think of it you'll figure it out too.

0:07:51.560,0:07:53.920
But lets make a small investigation to show what've happened.

0:07:54.100,0:07:58.800
How does this command know on which branch were we? Very simple, no black magic involved.

0:07:59.040,0:08:06.360
For that it checks the reflog for "HEAD" - checkout is switching the "HEAD" and looks namely for the "checkout" word there.

0:08:06.760,0:08:11.920
Lets illustrate this by adding the "--no-decorate" flag that will remove the additional links from the output.

0:08:12.220,0:08:16.800
And it looks from the latest checkout from above ... here it is.

0:08:17.300,0:08:21.240
And in this line it checks from where the checkout was done. From "fix".

0:08:21.700,0:08:27.700
So we need to switch to it, but the "fix" branch was removed, its not there any more, therefore we have the error.

0:08:28.100,0:08:33.760
If we put in another negative number git will get back to the specified number of checkouts.

0:08:34.080,0:08:37.760
For example if we move back to third checkout it was performed from the "feature".

0:08:39.220,0:08:40.780
And as you see, we've switched.

0:08:41.720,0:08:44.800
This is of course a very exotic use as -1 is used most of the time.

0:08:44.860,0:08:51.200
Now it worked, because we've just made another checkout and currently the previous branch before "feature" was "master".

0:08:51.600,0:08:53.160
And we can siwth one again.

0:08:53.260,0:08:58.400
Now the previous branch is feature and so on. This calls will siwtch between the master and the feature.

0:08:59.160,0:09:05.260
Many git commands know a shorter version of this syntax, just like that "-".

0:09:05.660,0:09:09.400
but not all of them. For those that dont we have to write it all.
