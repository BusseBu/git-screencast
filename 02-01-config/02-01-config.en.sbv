00:06 Congratulations! You've installed git. Now lets see how to configure it properly. There's going to be several videos on configuration.

00:12 First - a must see, has the base knowledges, that are a must have. The other ones are more like a good to know, but I encourage you to watch them all.

00:20 Git command usually looks like that: "git some-command-here". E.g. now Im in a "project" directory. This directory is empty so far. "git init" will turn it into a git repository.

00:32 So the .git folder will be created with all the git related data that is needed for the git to work. This is a service directory, that is always in a root of the git repository.

00:42 As you've just noticed my command prompt have immediately changed. This is because, as I've already mentioned previously, use a special script that adds git data to the command prompt.

00:52 In this case it says that Im on the master branch. But we'll speak about branches later.

00:57 Before adding data to git let's set the main config settings, using the "git config" command.
First of all lets change the user.name. Its very important as user name is being saved every time we save anything to git we also save who and when saved the data.

01:13 While working in a team one can see who does what and when. Most git commands cant work without this data being set. So I will write my name [git config user.name "Ilya Kantor"] "Ilya Kantor" and add my email.

01:27 Now if we get in the ".git" folder theres a file called "config". Lets execute "cat ./config" to see whats inside this file. There are some default settings, they were here before. Below theres exactly the data that that we've added.

01:43 As you see the config format is quite straightforward. This is a section [[user]] and these are its values below it
[name = Ilya Kantor]. So user.name corresponds with this "name " value under this "user" section.

01:52 In a more complex configt there can be subsections, that look like that. So the additional nesting layer is shown inside a square brackets. So these 2 commands [git config diff.png.textconv "identity -format '%wx%h %b\n'"] [git config diff.png.cachetextconv true] are writing here: [[diff "png"]]

02:04 Right now we dont need this, but later on might find use for this kind of parameters as well.

02:10 Now, lets see the levels of configuration. Modern OS systems allow to have multiple users on one PC. Every user can have different projects in various directories.

02:23 Git allows to have settings on different levels: local for a project, user specific, applied per user and system-wide, applied to all users. We've just used the local ones.
