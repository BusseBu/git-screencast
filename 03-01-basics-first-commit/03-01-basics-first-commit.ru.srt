1
00:00:05,680 --> 00:00:09,179
 Всем привет. В этом выпуске мы изучим основы работы с git.  0:00:09.280,0:00:15.720 Сейчас я нахожусь в редакторе, и у меня открыта директория project, в которой пока есть единственный файл index.html  0:00:15.900,0:00:19.000 Если Вы вдруг не знакомы с языком HTML - ничего страшного.  0:00:19.000,0:00:26.160 Его знание вообще не нужно в этом скринкасте. Вы можете представить вместо него свой любимый язык программирования или просто текст.  0:00:26.580,0:00:29.760 А теперь добавим к этому проекту версионирование при помощи git.  0:00:30.400,0:00:33.660 Команда git init создает пустой git-репозиторий.  0:00:34.000,0:00:41.000 Это директория .git, которая находится в корне проекта, и она содержит всю базу данных и основные настройки git.  0:00:41.520,0:00:45.520 Eсли мы вдруг захотим отказаться от git, то достаточно будет удалить эту директорию.  0:00:46.380,0:00:48.960 Сразу после создания репозиторий git пустой,  0:00:49.140,0:00:52.800 поэтому первое, что мы сделаем - это добавим к нему наш файл "index.html"  0:00:53.060,0:00:58.160 Одна из важнейших особенностей git - это то, что система внесения изменений в репозиторий двуступенчатая.  0:00:58.460,0:01:02.600 Чтобы наглядно продемонстрировать, я немножко поменял расположение элементов на экране.  0:01:02.780,0:01:08.080 Сверху будет консоль и редактор, а ниже я буду показывать, что происходит при различных командах.  0:01:08.460,0:01:10.980 Вы можете видеть здесь три зоны.  0:01:11.360,0:01:16.420 Первая - это рабочая директория. Сейчас в ней находится один файл "index.html"  0:01:16.420,0:01:19.440 Следующие две зоны принадлежат уже репозиторию git.  0:01:19.740,0:01:24.660 Данные о них находится внутри каталога .git  То есть это такое логическое разделение.  0:01:24.820,0:01:29.580 Индекс хранит список файлов рабочей директории, отслеживаемых системой git.  0:01:29.580,0:01:32.860 Прямо сейчас он пуст, потому что git репозиторий только создан.  0:01:33.200,0:01:39.420 Однако скоро мы добавим туда "index.html" Кроме того, индекс является промежуточным хранилищем изменений.  0:01:39.680,0:01:44.280 Когда мы хотим внести какие-то изменения в git, то мы сначала добавляем их в индекс,  0:01:44.400,0:01:49.700 и когда мы доделали какой-то кусок работы, то сохраняем изменение из индекса в третьей зоне,  0:01:49.860,0:01:55.540 которая обозначена как собственной репозиторий. И здесь уже хранится вся история разработки проекта.  0:01:55.660,0:01:58.040 Сейчас мы на нашем примере увидим как это делается.  0:01:58.720,0:02:05.060 Для начала давайте запустим команду git status Она вводит взгляд со стороны git на файлы нашего проекта.  0:02:05.520,0:02:11.640 Прямо сейчас у нас рабочей директории есть файл "index.html", но в индексе информация о нем отсутствует.  0:02:11.860,0:02:15.820 git status помечает такие файлы как untracked, то есть неотслеживаемые.  0:02:16.660,0:02:22.680 Кстати, в моем командном приветствии вот это как раз означает, что есть один неотслеживаемый гитом файл.  0:02:24.020,0:02:27.800 Давайте запустим команду git add, который добавит его в индекс.  0:02:29.680,0:02:31.680 Давайте проверим.  0:02:32.280,0:02:37.000 Ну вот. Git теперь знает, что такой файл у нас есть.  Как говорят, файл проиндексирован.  0:02:37.300,0:02:41.960 Чтобы окончательно записать его в репозиторий, мы используем команду git commit  0:02:42.140,0:02:47.740 Напомню, что git внутри себя вместе с изменением сохраняет информацию о пользователе, который его записал.  0:02:48.160,0:02:52.920 Ранее в выпуске про конфигурацию мы как раз добавляли её командой git --config  0:02:52.920,0:02:56.200 Без неё commit, скорее всего, просто откажется работать.  0:02:56.480,0:03:00.740 Запускаю. И попадаю в текстовый редактор. Какой именно, зависит от настроек.  0:03:01.000,0:03:06.320 Напомню, что выпуске про конфигурацию я использовал параметр core.editor для того, чтобы поставить Sublime.  0:03:06.560,0:03:10.400 Здесь мне нужно описать что за изменения я вношу в проект.  0:03:10.420,0:03:14.920 Вот я сейчас сохраняю файл в репозитории. Зачем он? Что это за файл? Что он делает?  0:03:15.040,0:03:19.900 В будущем эту информацию можно будет просматривать и видеть, как развивался проект.  0:03:20.740,0:03:24.540 Данный текст, который вы видите, сгенерирован автоматически самим гитом.  0:03:24.740,0:03:31.080 Он собирает изменение из индекса и перечисляет их здесь, чтобы мы видели, что собираемся записать или, как говорят, "закомитить".  0:03:31.260,0:03:34.380 В данном конкретном случае у нас вот один новый файл.  0:03:34.780,0:03:39.180 Замечу, что, когда мы наберём сообщение (это делается обычно выше) и закроем редактор,  0:03:39.660,0:03:43.360 то все строки, начинающиеся с решетки, будут автоматически вырезаны.  0:03:43.560,0:03:47.040 То есть это такой автосгенерированный комментарий для нашего ознакомления.  0:03:47.240,0:03:52.640 Обращаю ваше внимание, что сообщение, которое описывает сохраняемые изменения, может быть подробным и длинным.  0:03:53.040,0:03:58.840 В серьезных проектах с большим количеством разработчиков оно иногда длиннее, чем сам сохраняемый код.  0:03:59.060,0:04:04.180 Также есть общепринятые элементы форматирования, например, список, через дефис или звездочки.  0:04:04.340,0:04:09.860 Обычно коммит реализует какую-то одну вещь, но если функционал так переплетен, что получилось несколько,  0:04:09.860,0:04:13.160 то можно указать, что добавил одну фичу, поправил другую и так далее.  0:04:13.580,0:04:19.040 При этом важно, чтобы первая строка была не очень длинной. Скажем, не более 50 символов.  0:04:19.280,0:04:23.340 Мы не заканчиваем её точкой, и после нее должна идти пустая строка.  0:04:23.599,0:04:30.199 Дело в том что первая строка считается заголовком сообщения, и многие команды git и веб-интерфейс вводят только ее.  0:04:30.930,0:04:35.060 Ниже обычно идут детали: что за изменения, зачем они нужны, и так далее.  0:04:35.430,0:04:39.320 В нашем случае с первым комментом и так все понятно, поэтому я их удалю.  0:04:39.840,0:04:42.139 Сохраняю и закрываю редактор. Урааа!  0:04:42.800,0:04:46.880 Мы сделали первый коммит. Наконец-то сохранили данные в нашем репозитории.  0:04:47.060,0:04:51.220 Если сейчас запустить команду git status, то она ничего не выведет.  0:04:51.220,0:04:58.600 Это означает что текущее состояние рабочей директории, индекса и репозитория соответствуют друг другу.  0:04:58.940,0:05:04.280 Обратите внимание на это шестнадцатеричное число. Это хэш или, еще говорят,  0:05:04.320,0:05:08.320 идентификатор коммита, а точнее говоря, его часть. Полная несколько длиннее.  0:05:08.850,0:05:16.339 Далее мы продолжим разработку. Внесем еще изменения, но по этому числу мы всегда сможем как посмотреть сам коммит, то есть какие в нем  0:05:16.470,0:05:22.100 изменения, кто и когда его сделал, так и получить из репозитория файлы на момент этого коммита.  0:05:22.460,0:05:26.400 И вот посмотрите, пожалуйста, еще один момент, на котором хотелось бы остановиться.  0:05:26.640,0:05:32.860 Первая половина этого числа означает тип объекта, который мы сохраняем в git. В данном случае "100" - это файл.  0:05:32.860,0:05:40.220 Если бы была, к примеру, символическая ссылка, то (число) здесь было бы другое, а вторая половина "644" означает права на этот файл.  0:05:40.620,0:05:45.920 В зависимости от файловой системы, в зависимости от операционной системы права могут быть разными:  0:05:46.260,0:05:49.960 на запись, на чтение, на выполнение, кому принадлежит файл.  0:05:50.480,0:05:58.580 Git не сохраняет все многообразие этих прав. Git волнует только одна вещь: этот файл исполнимый для текущего пользователя или нет.  0:05:58.620,0:06:05.780 Если файл исполнимый, то здесь будет "755", если он неисполнимый, то будет "644".  0:06:05.940,0:06:11.520 Это единственная информация о правах, которое сохраняется в репозитории. Причем, обратите внимание,  0:06:11.600,0:06:16.780 если я сейчас сделаю файл исполнимым (под UNIX-системами это можно сделать такой командой),  0:06:17.120,0:06:24.300 то git status, видите, отмечает, что   в файле есть изменения. И при желании я могу добавить его в индекс и закомитить.  0:06:24.560,0:06:30.540 Для git изменение права на выполнение существенно наравне с изменением в содержимом файла.  0:06:30.780,0:06:34.540 Делаю обратно невыполнимым. Ну вот опять изменений нет.  0:06:35.969,0:06:39.778 Если вы используете git только под Windows, то ситуация с правами для вас проще.  0:06:40.500,0:06:46.020 Файловые системы под Windows обычно не поддерживают отдельное право на выполнение файла.  0:06:46.240,0:06:50.760 В отличие от UNIX-систем под Windows оно обычно объединено с правом на чтение,  0:06:51.300,0:06:57.480 то есть предполагается, что если файл можно считать, то его можно и выполнять. А под UNIX обычно эти права различные.  0:06:58.080,0:07:04.480 Git при создании репозитория проверяет, если файловая система не поддерживает отдельное право на выполнение,  0:07:04.480,0:07:10.580 то ставят такую настройку в false. Она говорит git, что на права в файловой системе вообще смотреть не надо.  0:07:11.040,0:07:16.940 Файлы которые, мы сохраняем в git под Windows, будут без исполнимого бита, всегда в режиме "644".  0:07:17.620,0:07:25.240 Ну, а что если мы разрабатываем под Windows проект, который также должны работать под Unix-системами и нужно сделать файл исполнимым?  0:07:26.020,0:07:32.700 Здесь можно либо развернуть репозиторий отдельно под UNIX-системы и cделать это там, либо есть такая команда:  0:07:33.009,0:07:38.548 поставит исполнимый бит файлу напрямую в индексе в обход файловой системы, где он игнорируется.  0:07:39.039,0:07:42.808 И затем, если его закомитить, то в репозитории уже будут правильные права.  0:07:43.329,0:07:46.138 Соответственно под Unix-системой файл выполнится без проблем.  0:07:47.079,0:07:53.309 Конкретно эта команда изменяет выполнимость у файла, который уже есть в индексе. Если же файла  еще нет и мы его только  0:07:53.439,0:07:57.088 добавляем, то аналогичный флаг также работает для команды git add  0:07:58.480,0:08:02.360 В будущем, чтобы посмотреть коммит, мы сможем воспользоваться командой git show,  0:08:02.580,0:08:07.740 которой передаем идентификатор или его начало, но не менее первых четырех символов.  0:08:08.000,0:08:13.920 Или можно без него, тогда покажет текущей коммит. И я ещё добавлю такой флаг, чтобы побольше информации вывело.  0:08:14.799,0:08:20.669 Вот мы можем видеть детали коммита. Сверху - полный идентификатор, в нем 40 шестнадцатеричных цифр.  0:08:21.039,0:08:28.498 Справа пока не обращаем внимание. Эта информация о ссылках на коммит. Мы разберем их позже. А вот ниже очень забавный момент.  0:08:28.779,0:08:34.888 Как я ранее говорил, в коммит записывается информация о том, кто и когда его сделал. Git взял её из конфигурации,  0:08:35.080,0:08:41.600 но при этом предполагается что в коммите могут участвовать два человека: автор и коммитер.  0:08:41.860,0:08:48.560 Автор - это тот, кто придумал данные изменения, написал код, соответственно, авторская дата - когда он это сделал.  0:08:49.200,0:08:54.480 Вполне возможно, автор не имеет прав на запись в репозиторий, он пристал код разработчику,  0:08:54.480,0:09:00.740 который такое право имеет. Тот посмотрел и сохранил его в проект, как мы с вами только что сделали, закоммитил.  0:09:01.350,0:09:05.659 Соответственно, коммитер - это тот, кто непосредственно создал коммит в репозиторий,  0:09:06.000,0:09:13.190 и commit date - когда коммит был создан. По умолчанию коммитер и автор - это одно и то же лицо, и дата одинаковая, то есть предполагается  0:09:13.470,0:09:19.730 что я сам придумал код и я же его сохранил, но, как я уже говорил, бывают сценарий, при которых они разные.  0:09:20.430,0:09:27.079 Например, есть проект с открытым исходным кодом. Самые разные разработчики присылают дополнения, улучшения создателям проекта,  0:09:27.480,0:09:34.159 которые смотрят и, если все хорошо, комитят код проект. При этом важно сохранить информацию об исходном авторе,  0:09:34.500,0:09:37.680 поскольку, во-первых, страна должна знать своих героев,  0:09:37.700,0:09:42.660 а во-вторых, если потом с кодом обнаружится проблема, то будет видно к кому обратиться.  0:09:43.020,0:09:46.820 Git позволяет указать автора при коммите при помощи флага --author  0:09:47.240,0:09:52.660 И дальше автор в том же виде, в котором он описан выше, например, вот так, и здесь email  0:09:53.580,0:09:57.260 И дату автора при помощи флага --date. Коммит с такими параметрами  0:09:57.779,0:10:04.249 поставят коммитером по-прежнему меня, и датa коммита будет текущей, а автор и авторская дата будут поставлены как и указано.  0:10:04.560,0:10:11.479 То есть эти флаги меняют именно автора, а не коммитера. Впрочем, можно поменять кого угодно, используя такие вот переменное окружения,  0:10:12.120,0:10:18.079 так что технически можно записать коммит хоть от Деда Мороза январем прошлого года, но на практике это нужно редко.  0:10:19.290,0:10:25.339 Замечу, что даже если вы не предполагаете ставить такие флаги, то в будущем мы изучим команды, которые копируют,  0:10:25.620,0:10:33.349 перемещают коммиты. При этом информация об авторе остается такой же, a коммитер обычно меняется на того, кто инициировал операцию.  0:10:33.800,0:10:40.460 Соответственно, если вы работаете вместе с какими-то коллегами, вы берете их коммиты, потом перемещаете их,  0:10:40.700,0:10:44.080 коммитер изменяется на вас, автором остается тот, который сделал этот коммит.  0:10:44.250,0:10:49.429 Все это мы еще увидим. На текущий момент важно понимать, что git проводит четкое различие между  0:10:49.829,0:10:52.549 автором кода и тем, кто его записал репозиторий.  0:10:53.639,0:10:57.948 Далее в git show выводятся изменения, сделаные в этом коммите. Тут всё достаточно очевидно:  0:10:58.620,0:11:05.630 добавился новый файл с таким содержимым. Про этот вывод более детально поговорим позже, когда будет больше коммитов, и он будет более интересен.

