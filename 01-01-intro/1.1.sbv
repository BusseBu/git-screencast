0:00:00.000,0:00:05.920
[Музыка]

0:00:06.000,0:00:06.980
Всем привет!

0:00:07.160,0:00:08.780
Добро пожаловать на скринкаст по git.

0:00:09.340,0:00:12.520
Первый выпуск посвящен тем, кто пока еще не пользуется этой системой.

0:00:12.980,0:00:16.420
Как вы наверняка уже слышали, git - это система контроля версий

0:00:16.860,0:00:18.360
А, если сказать более развернуто,

0:00:18.360,0:00:22.160
то это - хранилище, база данных для истории разработки проекта,

0:00:22.160,0:00:24.340
которая содержит все версии его файлов.

0:00:24.400,0:00:27.000
Как текущие, так и старые, уже неактуальные.

0:00:27.000,0:00:29.880
Мы добавляем в него начальные версии наших файлов.

0:00:29.880,0:00:34.040
И потом, когда мы что-то подредактировали, то мы добавляем в git обновленную версию.

0:00:34.040,0:00:36.040
И git ее тоже у себя записывает.

0:00:36.600,0:00:39.600
И, что самое замечательное, мы всегда можем залезть в это хранилище,

0:00:39.600,0:00:41.600
посмотреть, что там лежит

0:00:41.600,0:00:43.600
и восстановить предыдущие версии файлов.

0:00:44.220,0:00:47.600
Особенно здорово то, что git может не только хранить версии,

0:00:47.600,0:00:50.760
но и позволяет обмениваться ими между разработчиками.

0:00:51.280,0:00:54.240
Есть у нас в команде, к примеру, Паша, Вася и Маша.

0:00:54.920,0:00:56.580
У каждого из них стоит git,

0:00:56.680,0:00:58.140
все они что-то разрабатывают.

0:00:58.540,0:01:01.120
Когда кто-то доделал какой-то участок работы,

0:01:01.320,0:01:05.280
то git позволяет ему легко передать получившиеся файлы своим коллегам.

0:01:05.820,0:01:07.780
Причем в отличии от простого копирования

0:01:07.780,0:01:10.820
в git есть встроенные средства обнаружения конфликтов

0:01:10.820,0:01:12.480
и интеграции изменений.

0:01:12.920,0:01:16.220
Так что даже если два разработчика, вдруг, даже поменяли один и тот же файл,

0:01:16.220,0:01:19.560
то они смогут это легко увидеть и объединить свои изменения.

0:01:19.800,0:01:22.800
А в простых случаях git даже сделает это автоматически.

0:01:23.280,0:01:25.780
Git называют распределенной системой контроля версий,

0:01:25.780,0:01:28.280
потому, что в ней не требуется центральный сервер.

0:01:28.280,0:01:31.440
У каждого разработчика стоит локальная копия git

0:01:31.440,0:01:34.260
 которая хранит историю разработки проекта.

0:01:34.260,0:01:35.620
Когда он что-то сделал

0:01:35.700,0:01:38.760
он в первую очередь записывает это к себе на компьютер, в свой git.

0:01:38.920,0:01:41.560
А потом, если захочет, может связаться с коллегами,

0:01:41.680,0:01:43.760
отправить свои изменения, получить их.

0:01:44.480,0:01:47.700
Однако, в реальных проектах центральный сервер, как правило делают.

0:01:48.020,0:01:49.240
Он служит для удобства.

0:01:49.540,0:01:52.200
На него все разработчики отправляют свои изменения.

0:01:52.200,0:01:54.720
И с него могут скачать то, что сделали их коллеги.

0:01:54.720,0:01:57.920
В данном случае сервер не выполняет никакой умной работы.

0:01:57.920,0:02:00.720
Это всего лишь центральный пункт обмена данными.

0:02:00.720,0:02:03.720
Все основные операции по-прежнему выполняются локально.

0:02:03.720,0:02:07.220
то есть можно даже жить на острове оторванном от интернета,

0:02:07.220,0:02:10.200
вести там разработку, смотреть историю проекта,

0:02:10.200,0:02:12.420
добавлять в нее новые файлы,

0:02:12.420,0:02:15.360
при необходимости, восстанавливать предыдущие версии,

0:02:15.360,0:02:17.140
в общем, работать как обычно.

0:02:17.140,0:02:19.380
А потом, по возвращению на большую землю,

0:02:19.380,0:02:21.380
поделиться своими результатами.

0:02:21.620,0:02:24.360
И, наконец, последнее, но от этого не менее важное:

0:02:24.360,0:02:26.360
git - это надежная система.

0:02:26.740,0:02:29.100
То есть если у нас файлы лежат просто на диске,

0:02:29.100,0:02:31.440
мало ли что, повреждение жесткого диска

0:02:31.440,0:02:32.640
или сбой памяти.

0:02:32.640,0:02:35.880
Если у нас файлов много, мы можем даже не сразу это заметить.

0:02:36.220,0:02:38.700
В то время как git не просто хранит версии файлов,

0:02:38.700,0:02:41.480
он для всего вычисляет контрольную сумму.

0:02:41.480,0:02:46.080
И если хоть где-нибудь данные будут повреждены, мы обязательно это обнаружим.

0:02:46.160,0:02:48.840
Но а так как git - это распределенная система

0:02:48.840,0:02:51.760
и у каждого разработчика есть своя копия истории проекта,

0:02:51.760,0:02:55.040
то автоматически получается такой большой-большой, надежный бэкап.

0:02:55.040,0:02:57.040
И если файлы повредились у меня,

0:02:57.040,0:02:59.200
то я легко смогу восстановить их у коллеги.

0:02:59.780,0:03:03.200
Замечу, что это защита относится не только к случайным повреждениям,

0:03:03.200,0:03:05.220
но и к повреждениям злонамеренным.

0:03:05.420,0:03:09.120
То есть если злобный вирус или хакер изменил какие-то файлы проекта. 

0:03:09.120,0:03:14.520
То это будет либо замечено тут же по контрольной сумме, которая хранится локально, в этом же git.

0:03:14.680,0:03:17.960
Либо, если локальную контрольную сумму он тоже подменил,

0:03:17.960,0:03:19.280
а сделать это не так просто, потому,

0:03:19.280,0:03:23.120
что контрольные суммы завязаны одна на другую и менять потребуется много чего.

0:03:23.560,0:03:27.280
То это приведет к конфликту при синхронизации с другими участниками проекта.

0:03:27.520,0:03:29.880
Так что мы опять же заметим изменения,

0:03:29.880,0:03:32.200
и при помощи коллег сможем их отменить.

0:03:32.660,0:03:34.920
Короче говоря, git можно доверять

0:03:34.920,0:03:38.580
Кроме того существует ряд дополнительных возможностей git,

0:03:38.580,0:03:40.080
полезных интернет сервисов. 

0:03:40.080,0:03:44.640
Все это вы со временем обязательно изучите, но для начала давайте поставим git.
