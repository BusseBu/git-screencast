0:00:00.860,0:00:06.200
Ранее, при использовании git checkout, мы указывали имя ветки - например, master или feature.

0:00:06.740,0:00:09.980
Но, технически, никто не мешает нам перейти вообще на любой коммит.

0:00:10.360,0:00:11.780
Например, на такой [1913].

0:00:12.140,0:00:16.620
Этим можно пользоваться, чтобы временно вернуться на любое предыдущее состояние проекта.

0:00:16.980,0:00:19.280
Неважно, указывает на него какая-то ветка или нет.

0:00:19.580,0:00:23.260
Однако, при этом возникает так называемое состояние «отделенной HEAD».

0:00:23.500,0:00:26.640
И чтобы не наломать дров, необходимо понимать, что это такое.

0:00:27.000,0:00:28.040
Запускаю...

0:00:28.180,0:00:30.300
Ух, как много написал на эту тему Git.

0:00:31.180,0:00:33.800
Checkout на коммит, в общем-то, происходит как обычно.

0:00:34.240,0:00:38.680
Git передвигает HEAD и обновляет файлы проекта на момент этого коммита.

0:00:39.060,0:00:43.920
Но есть одна особенность, о которой Git предупреждает нас вот таким вот длинным сообщением.

0:00:44.720,0:00:47.980
Его общий смысл в том, что мы перешли в особое состояние,

0:00:48.120,0:00:51.680
которое называется "detached HEAD", то есть «отделенная HEAD».

0:00:52.240,0:00:57.340
Ранее мы давали команде checkout другую ветку, и она переключала HEAD на неё.

0:00:57.720,0:01:02.400
А теперь мы дали идентификатор коммита, и checkout перенес HEAD на него.

0:01:02.800,0:01:07.640
Иными словами, в HEAD находится теперь не ветка, а ссылка на этот конкретный коммит.

0:01:08.160,0:01:09.880
Вот даже давайте посмотрим файлик...

0:01:10.640,0:01:14.560
Видите, раньше там была ветка, а теперь идентификатор коммита.

0:01:14.980,0:01:19.780
Именно это и является состоянием «отделенной HEAD», и об этом предупреждает Git.

0:01:20.560,0:01:24.200
Что же такого особенного в этом состоянии, почему о нем нужно предупреждать?

0:01:24.820,0:01:28.240
Чтобы это понять, давайте добавим в проект еще один коммит.

0:01:28.700,0:01:30.920
Cкажем, изменим эту фразу...

0:01:31.780,0:01:33.580
И сохраним изменения в репозитории.

0:01:35.480,0:01:39.620
Родителем нового коммита становится тот, на который ранее указывал HEAD -

0:01:39.980,0:01:41.960
поэтому получаем вот такую картинку.

0:01:42.320,0:01:46.440
Если мы продолжим разработку, то от этого коммита отойдут новая, и так далее.

0:01:47.400,0:01:51.800
Особенность таких коммитов в том, что они не участвуют ни в одной из ветвей разработки.

0:01:52.100,0:01:54.020
На практике это довольно-таки неудобно.

0:01:54.320,0:01:57.500
Например, давайте перейдем на ветку fix.

0:01:58.100,0:02:03.580
Обратите внимание, мы покинули состояние "detached HEAD", теперь мы снова на обычной ветке, как и раньше.

0:02:04.260,0:02:06.820
А коммиты, которые мы сделали, как бы подвисли.

0:02:07.360,0:02:12.300
Так как они не участвуют ни в одной из ветвей разработки, то к ним даже возвращаться не очень-то удобно.

0:02:12.540,0:02:16.240
Как это сделать? По идентификатору коммита? Но его легко забыть.

0:02:17.020,0:02:20.300
Более того, как мы подробнее обсудим в последующих выпусках,

0:02:20.300,0:02:24.260
Git такие недостижимые коммиты со временем вообще удаляет.

0:02:24.920,0:02:29.100
Cитуация довольно-таки опасная: мы же не хотим потерять уже сделанную работу.

0:02:29.400,0:02:32.380
Поэтому Git предупреждает нас об этом вот таким сообщением.

0:02:32.820,0:02:38.140
И здесь же подсказывает команду, как этих проблем избежать: cоздать для новых коммитов полноценную ветку.

0:02:39.160,0:02:44.000
C другой стороны, как правило, коммиты в состоянии «отделенной HEAD» делаются по ошибке.

0:02:44.380,0:02:49.420
Например, мы переключились на коммит, просто чтобы посмотреть состояние проекта на тот момент.

0:02:49.800,0:02:54.740
Походили по проекту, забыли, что мы в состоянии «отделенной HEAD», и сделали коммит.

0:02:55.060,0:02:59.600
А на самом деле хотели сделать коммит, к примеру, на master или на feature.

0:03:00.060,0:03:04.260
К счастью, поправить это очень просто. В Git есть команда cherry-pick,

0:03:04.360,0:03:07.520
которой можно передать коммит или несколько коммитов,

0:03:07.520,0:03:11.680
и она скопирует их на текущую ветку, как будто мы сделали их прямо на ней.

0:03:12.020,0:03:13.600
После чего проблема будет исчерпана

0:03:14.190,0:03:17.329
Подробнее про cherry-pick мы поговорим в отдельном выпуске скринкаста.
