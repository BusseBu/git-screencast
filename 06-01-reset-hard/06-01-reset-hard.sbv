0:00:00.579,0:00:02.409
Бывает так, что в нашу разработку

0:00:02.409,0:00:07.319
вкрадываются ошибки. Которые мы замечаем не сразу, а когда они уже попали в репозиторий и

0:00:07.540,0:00:14.790
хотелось бы отменить последний коммит или даже несколько коммитов и поменять там что-то. Для этого обычно используют команду "git reset".

0:00:15.009,0:00:22.469
Мы передаем ей коммит на который хотим вернуться. Можно идентификатором, но в большинстве ситуаций мы хотим вернуться на один или несколько

0:00:22.810,0:00:26.640
коммитов назад. Напомню, для получения родителя используются тильда,

0:00:27.430,0:00:32.610
а "HEAD" можно обозначить собачкой. Так что собачка тильда - это родитель текущего коммита.

0:00:34.329,0:00:41.069
У команды "reset" есть несколько вариантов вызова, они описываются флагами. Для начала разберемся с "hard" - это самый простой для понимания,

0:00:41.230,0:00:47.969
так называемый жесткий вариант "reset". При запуске он передвигает текущую ветку на указанный коммит. Давайте для наглядности

0:00:48.430,0:00:53.520
поменяем его на идентификатор собачка тильда - родитель "HEAD", в данном случае вот такой.

0:00:54.340,0:01:00.059
И обновляет рабочую директорию вместе с индексом так, чтобы они соответствовали состоянию проекта на момент этого коммита.

0:01:00.609,0:01:04.109
Запускаю! Готово! Мы откатились на предыдущий коммит.

0:01:04.540,0:01:11.609
"master" теперь указывает вот сюда и вы наверно заметили в редакторе "index.html" обновился. В рабочей директории теперь

0:01:11.740,0:01:18.479
предыдущая версия. И если я наберу "git status", то мы видим статус чистый - это означает что рабочая директория

0:01:18.970,0:01:26.339
и индекс соответствуют друг другу и текущему, то есть более старому состоянию репозитория. Как будто последнего коммита никогда и  не было.

0:01:27.310,0:01:31.920
Теперь, если я захочу продолжить разработку, внести какие-то изменения и

0:01:32.860,0:01:34.479
закомитить.

0:01:34.479,0:01:39.479
Обратите внимание, родителем нового коммита будет текущая "HEAD", то есть текущая вершина "master".

0:01:39.850,0:01:42.869
Вот видите, на картинке справа, я это демонстрирую.

0:01:43.090,0:01:50.729
Теперь новая вершина - это наш последний коммит. И дальнейшей разработкой в "master" будет идти от нее. Ну, а старый коммит, условно говоря, отошёл в сторону.

0:01:51.040,0:01:56.819
В нашем случае, он больше не участвует ни в одной из ветвей разработки. Он недостижим ни по одной ссылке, а

0:01:57.040,0:02:00.779
значит со временем будет удален из базы, то есть картина станет вот такой

0:02:01.420,0:02:07.530
таким образом при помощи "git reset" я полностью отменил последний коммит и сейчас сделал вместо него новый.

0:02:07.989,0:02:15.979
С другой стороны жизнь - штука многогранная. Возможна ситуация, что мы отресетили, а потом схватились за голову. Ой, хотим вернуть все назад.

0:02:16.349,0:02:20.839
К счастью Git удаляет коммиты далеко не сразу, поэтому я могу вернуть все обратно.

0:02:21.450,0:02:28.700
Для этого, я еще раз запущу "git reset" и передам ей, тот коммит, на котором "master" была ранее, то есть вот такой.

0:02:29.220,0:02:33.259
Впрочем, в реальной жизни я могу уже десять раз забыть этот идентификатор.

0:02:33.569,0:02:40.878
"git log" его разумеется не покажет, потому что он недостижим. А картинки справа, как в этом скринкасте, в реальной жизни перед глазами нет. Зато есть

0:02:41.010,0:02:47.840
команда "git reflog". "git reflog master" - содержит все предыдущие значения "master". Cоответственно, можно там этот коммит найти.

0:02:48.299,0:02:52.459
Или, есть еще один вариант. Команда "git reset", когда перемещает ветку,

0:02:52.920,0:02:57.559
записывает предыдущее значение "HEAD" в директорию ".git", файл "ORIG_HEAD".

0:02:58.200,0:03:05.179
И мы можем использовать его в качестве ссылки. То есть "git reset" и "ORIG_HEAD". Вот это, вернет все как было.

0:03:07.290,0:03:13.849
Готово! "master" указывает теперь куда и ранее. И в рабочей директории, индексы теперь все тоже, как было до первого ресета.

0:03:14.280,0:03:19.250
Отличие только в том, что в базе теперь есть другой, недостижимый, коммит. Тот, который мы только что сделали.

0:03:19.709,0:03:23.689
На него указывает "ORIG_HEAD", так как мы через "reset", только что с него ушли.

0:03:24.510,0:03:31.190
Замечу, что "ORIG_HEAD" -  это такая второстепенная ссылка. C одной стороны мы можем использовать ее в командах, с другой

0:03:31.380,0:03:33.380
Git сохраняет её просто на всякий случай.

0:03:34.019,0:03:41.479
Внутри себя он её не использует. И на достижимость коммитов и сборку мусора она тоже не влияет. То есть она только для такого вот удобства.

0:03:41.730,0:03:46.280
В будущем мы встретимся другими ссылками, такого вида, что-то подчёркивание "HEAD",

0:03:46.500,0:03:51.169
которые создаются другими командами Git. Все такие ссылки, на сборку мусора не влияют.

0:03:51.840,0:03:56.239
Со временем лишний коммит удалиться из базы и структура станет такой же, как была.

0:03:56.970,0:04:00.589
Итак, только что мы откатились на один коммит назад и вернулись обратно.

0:04:00.959,0:04:02.790
По-умолчанию записи,

0:04:02.790,0:04:09.500
о недостижимых комментах хранятся рефлоге, а значит и в базе, как и минимум 30 дней. И в течение этого времени можно прыгать туда-обратно.

0:04:09.980,0:04:14.599
Куда угодно, то есть команда "git reset" является обратимой, за одним исключением.

0:04:15.560,0:04:19.820
Если файлах были не закомиченны изменения, то при жестком "reset", они пропадут.

0:04:20.420,0:04:26.480
Файлы будут просто, без вопросов, заменены на те, которые были на момент соответствующего коммита в репозитории.

0:04:26.880,0:04:29.880
Если незакомиченные изменения все-таки хочется сохранить,

0:04:30.210,0:04:37.849
то в будущих выпусках мы изучим "git reset" с флагом "keep" или можно использовать "git stash". Но если наша цель - откатить последнее изменение,

0:04:38.150,0:04:40.879
то наверное такое поведение скорее плюс, нежели минус.

0:04:41.280,0:04:47.719
Эту особенность команды "reset" иногда используют, для очистки локальной директории индекса от незакоммиченных изменений.

0:04:48.270,0:04:50.270
Например, я что-то поделал с файлами,

0:04:50.939,0:04:56.689
поэкспериментировал, возможно даже добавил какие-то изменения в индекс но они мне не нравятся и хочу вернуть все, как было.

0:04:57.569,0:05:03.378
Запускаю, "git reset --hard". Если коммит не указан, то подразумевается текущий коммит, то есть "HEAD".

0:05:03.629,0:05:08.449
При этом, ветка сдвигаться не будет, но файлы и индекс, будут восстановлены из репозитория.

0:05:09.840,0:05:17.600
Готово! Статус опять чистый. Незакоммиченные изменения удалены, как из индекса, так и из рабочей директории. Их больше нет.

0:05:17.940,0:05:19.760
Итак, как мы видели в этом выпуске,

0:05:20.009,0:05:26.359
жесткий "reset" обычно используются для полной отмены последних коммитов и для удаления незакоммиченных изменений.
