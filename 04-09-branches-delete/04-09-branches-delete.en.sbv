0:00:00.380,0:00:04.820
Now, when we made a merge, do we still need a fix branch.

0:00:05.160,0:00:09.500
I remind you that we only made it for the sake of the changes we've implemented inside it,

0:00:09.500,0:00:13.440
so that while they are a work in progress, we keep them separated from our main branch "master".

0:00:13.920,0:00:20.200
But once its done and merged with the master then, as they say "The moor has done his duty, the moor can go"


0:00:20.480,0:00:26.060
We dont need the fix any more, why do we keep another link to the same commit? Lets remove it.
Ветка fix больше не нужна - зачем нам еще одна ссылка на тот же коммит? Давайте ее удалим.

0:00:26.940,0:00:33.260
To remove a branch we can use the following command: "git branch -d fix" 

0:00:34.340,0:00:40.560
Done. As you see, this command will only delete the "fix" link, the commits themselfs will remain in Git.

0:00:41.000,0:00:45.260
So, instead of two branches we only have one now. As you can see its all very simple.

0:00:45.840,0:00:51.480
Albeit theres one more thing: this command will perform a deletion only if the branch is merged with the current one.

0:00:51.860,0:00:54.500
Like in our case fix was merged with master.

0:00:54.500,0:00:58.560
It has not commits of its own, therefore the deletion was successful.

0:00:59.300,0:01:01.960
But if we try to delete the feature branch...

0:01:02.000,0:01:03.500
You see, an error.

0:01:03.800,0:01:06.620
The point is that deleting a branch is a dangerous thing.

0:01:06.920,0:01:11.220
Git has our back covered so we dont delete the branch that we might need still.

0:01:11.780,0:01:16.720
Indeed, lets imagine for a moment, that the feature branch was deleted. Snap and its gone.

0:01:17.540,0:01:21.560
In this case the commits, this one and this one, the ones that were only in the feature

0:01:21.960,0:01:24.400
are not a part of any of the current dev branches.

0:01:25.360,0:01:27.360
In this case only one branch has remained - master.

0:01:28.160,0:01:29.980
And here are commits that it has.

0:01:30.660,0:01:31.780
But not these ones.

0:01:32.460,0:01:39.260
Commits that are unavailable by any link are called unreachable. Git removes them from its database after a while.

0:01:39.820,0:01:41.860
If thats what we really want - 

0:01:42.460,0:01:47.300
the feature branch is useless and we want to remove it and throw away the commits that we made for it only

0:01:47.760,0:01:52.640
then "git branch -D" will do this.

0:01:53.300,0:01:58.160
I also want to note, that in any way this command only removes the link.

0:01:58.540,0:02:01.760
The unreachable commits will be stored in a Git's database for some time.

0:02:02.020,0:02:06.200
Therefore if the deletion was just done, the image is the following.

0:02:07.100,0:02:10.960
If it appeared that the branch is still needed, then we can cancel the deletion.

0:02:11.640,0:02:14.720
Actually "cancel" is not exactly right here.

0:02:15.120,0:02:18.000
One can create a new branch with the same name,

0:02:18.000,0:02:23.060
that points to the same commit as the deleted one. I mean to this identifier.

0:02:23.560,0:02:25.800
Thats it, the feature is back again.
