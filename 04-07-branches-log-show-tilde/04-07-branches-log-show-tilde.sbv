0:00:00.100,0:00:06.940
В этом скринкасте у нас справа почти всегда есть наглядная картинка со структурой репозитория, где видны все коммиты.

0:00:07.340,0:00:12.360
В жизни, чтобы ее посмотреть, обычно используются графические утилиты или команда git log.

0:00:12.880,0:00:16.360
Запускаю... И здесь подробная информация о каждом коммите.

0:00:16.700,0:00:20.540
Давайте я использую ключ "--oneline", чтобы сделать вывод более компактным.

0:00:20.840,0:00:23.840
По умолчанию git log выводит коммиты, начиная от HEAD.

0:00:24.000,0:00:28.100
Но можно передать и любой другой коммит в виде идентификатора или ссылкой.

0:00:28.360,0:00:33.780
Например, git log master показывает коммиты ветки master - в нашем случае это первые три.

0:00:34.680,0:00:41.220
У команды git log есть много ключей и возможностей, которым далее будет посвящено даже несколько выпусков скринкаста.

0:00:41.960,0:00:47.360
Когда мы знаем интересующий нас коммит, то можно посмотреть подробно именно его командой git show.

0:00:47.920,0:00:50.080
По умолчанию будет показан коммит из HEAD.

0:00:50.300,0:00:54.740
Но можно передать и любой другой, например, через ссылку или идентификатор.

0:00:55.720,0:00:59.580
Видите, тут сначала общая информация о коммите, а потом внесенные изменения.

0:00:59.980,0:01:05.280
В жизни нас наиболее часто интересуют коммиты на один-два шага назад по текущей ветке

0:01:05.400,0:01:07.560
или по какой-нибудь другой известной нам ссылке.

0:01:07.800,0:01:13.040
Чтобы не искать их идентификаторы в логах в Git есть для этого специальный очень удобный синтаксис.

0:01:13.820,0:01:19.060
Для перехода от любого коммита или ссылки к родителю достаточно добавить значок "~".

0:01:19.620,0:01:22.340
То есть вот так ("git show HEAD~") - это вот этот коммит,

0:01:22.360,0:01:25.440
непосредственный родитель коммита, на который указывает HEAD.

0:01:26.060,0:01:29.300
Видите, вывод такой же, как если бы мы указали идентификатор.

0:01:30.020,0:01:33.600
Если поставить две тильды, то это его родитель - то есть ниже.

0:01:34.080,0:01:38.520
Для краткости добавлю флаг --quiet, чтобы вывело только информацию без изменений.

0:01:40.000,0:01:43.700
Три тильды - коммит еще ниже, и так далее.

0:01:44.720,0:01:48.980
Конечно, много тильд писать неудобно, поэтому их количество можно обозначить числом.

0:01:49.160,0:01:52.500
Три тильды - то же самое, что вот так ("~3") - три коммита назад.

0:01:52.800,0:01:55.220
Две тильды - то же самое, что вот так ("~2").

0:01:55.500,0:01:59.800
А единичка, соответственно, ничего не означает - то же самое, что просто одна тильда.

0:02:00.220,0:02:04.960
Само слово "HEAD" тоже можно сократить, можно писать вместо него собачку, вот так ("@").

0:02:05.460,0:02:10.960
Подобное сокращение реализовано в Git исключительно для HEAD, потому что HEAD используется очень часто.

0:02:11.580,0:02:16.980
Единственное, под windows powershell "@" - это специальный символ, поэтому там понадобятся кавычки.

0:02:17.080,0:02:19.420
Но в остальных оболочках все сработает и так.

0:02:19.840,0:02:25.340
Также мы можем добавить тильду не только к HEAD, но и вообще к любому идентификатору или ссылке на коммит. 

0:02:25.520,0:02:30.920
В частности, "master~" - один шаг назад от master - это то же самое , что три шага назад от HEAD.

0:02:32.100,0:02:38.040
При таком выводе показываются отличия в файлах. А как посмотреть не отличия, а предыдущие файлы целиком?

0:02:38.980,0:02:44.680
Из прошлых выпусков мы уже знаем команду git checkout, которая позволяет на момент любого коммита,

0:02:44.680,0:02:49.200
например, родительского, восстановить любой файл, скажем, index.html.

0:02:49.520,0:02:55.800
Но в результате такого вызова наш текущий index.html в рабочей директории будет заменен на более старый.

0:02:56.000,0:03:00.980
А это не всегда удобно, особенно, если мы делали в нем какие-то изменения, - они просто пропадут.

0:03:01.540,0:03:05.960
А что, если мы хотим не заменить текущий файл, а просто посмотреть, что было в нем раньше? 

0:03:06.340,0:03:11.680
С этим может также помочь git show - для этого после коммита через двоеточие нужно указать путь.

0:03:12.060,0:03:14.720
Готово, вот index.html из коммита родителя.

0:03:15.400,0:03:18.500
Конечно, мы можем передать и любой другой коммит или ссылку.

0:03:18.700,0:03:22.540
Например, посмотрим index.html, соответствующий вершине ветки fix.

0:03:23.380,0:03:28.060
И, наконец, мы можем посмотреть версию файла не из коммита, а текущую проиндексированую,

0:03:28.060,0:03:31.820
если оставим двоеточие, но удалим перед ним коммит, вот так (":index.html").

0:03:32.220,0:03:37.820
Это, конечно, имеет смысл только в том случае, если версия файла в индексе отличается от текущей.

0:03:38.260,0:03:43.800
Такое бывает, когда мы поработали, проиндексировали изменения, а потом поменяли в файле что-то еще.

0:03:44.040,0:03:49.980
Так мы увидим именно то, что в индексе, то есть, ту версию файла, которая будет сохранена при ближайшем коммите.

0:03:50.820,0:03:55.600
Итак, мы посмотрели как общую историю разработки, так и предыдущие версии файлов. 

0:03:55.860,0:03:59.780
А также познакомились с доступом к родительским коммитам через тильду.

0:04:00.340,0:04:06.380
Есть еще один способ доступа к коммиту, когда мы не помним его идентификатор - их вообще редкто кто помнит -

0:04:06.380,0:04:10.360
но знаем, что в описании есть какое-то слово, скажем, название функции.

0:04:10.820,0:04:15.440
Он выглядит так: ":/" и потом, что искать.

0:04:16.140,0:04:21.300
Можно указать несколько слов, обернув всю эту конструкцию в кавычки или регулярное выражение.

0:04:21.300,0:04:23.540
Но чаще всего ищут по конкретному слову.

0:04:24.040,0:04:29.140
При этом Git найдет самый свежий коммит с таким словом в описании -  в нашем случае, вот он.

0:04:29.620,0:04:32.100
Заметим, что этот коммит не из текущей ветки.

0:04:32.440,0:04:38.000
Для такого синтаксиса ветка не важна, он ищет просто самый новый коммит с таким вот словом в описании.

0:04:38.260,0:04:41.380
То есть, этот синтаксис придуман для доступа к недавним коммитам. 

0:04:41.620,0:04:45.500
Конечно, его можно использовать не только в git show, но и вообще в любой команде Git.

0:04:46.040,0:04:51.600
Ну а если хочется найти все коммиты с таким словом в описании или интересует что-то более сложное,

0:04:51.640,0:04:55.600
скажем, искать коммиты, меняющие какой-то файл или функцию в файле,

0:04:55.640,0:04:59.700
то это также возможно, но уже при помощи различных флагов команды git log.

0:04:59.860,0:05:03.280
Более подробно об этом вы можете посмотреть в соответствующем выпуске.
