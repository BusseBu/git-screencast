0:00:05.890,0:00:10.469
кроме веток в git есть еще один вид ссылок на коммиты, так называемые теги

0:00:10.960,0:00:15.989
создаются они очень просто: гит, тег, имя тега, например, такое и

0:00:16.480,0:00:21.270
коммит, на который тег должен указывать, по умолчанию это "HEAD" ну поставим, например, такой

0:00:22.000,0:00:28.410
после создания я могу использовать тег вместо идентификатора коммита, например "git show --quiet" и дальше тег

0:00:29.289,0:00:33.869
кроме того, так как тег является ссылкой на коммит, то его видно в выводе "git log"

0:00:34.360,0:00:40.589
в отличие от ветки тег это просто метка, он никуда не перемещается и всегда указывает на один и тот же коммит

0:00:40.719,0:00:47.879
то есть, если мы находясь на ветке сделаем коммит, то соответствующая ссылка сдвинется, мы это наблюдали очень подробно ранее

0:00:48.190,0:00:55.500
а тег гораздо проще, его создал и он всегда указывает на этот коммит, такая вот просто метка, без хитрой механики

0:00:55.870,0:00:57.870
один из частых примеров использования

0:00:57.989,0:00:58.930
эта маркировка

0:00:58.930,0:01:03.689
релизов, то есть мы хотим указать, что на этом коммите была выпущена версия такая-то

0:01:03.820,0:01:09.389
при этом, как раз очень удобно и важно, что тег, в отличие от ветки, при коммитах никуда не двигается

0:01:09.520,0:01:16.170
ведь то, что на данном коммите была выпущена определенная версия, это все, уже факт, и тегом мы обозначаем это раз и навсегда

0:01:16.869,0:01:22.829
потом, при желании, мы можем к нему вернуться, создать отдельную ветку для доработки версии 1 . x

0:01:23.140,0:01:26.820
которая изначально будет указывать на тот же коммит, что и этот тег и

0:01:27.040,0:01:33.809
продолжить разработку в ней, но в любом случае, уже ничто не изменит того, что на этом коммите был выпущен релиз 1.0.0, а

0:01:34.180,0:01:36.419
будущие релизы соответственно будут иметь свои теги

0:01:37.119,0:01:40.828
чтобы посмотреть список тегов можно использовать команду "git tag" без аргументов

0:01:41.950,0:01:49.619
есть дополнительные параметры, фильтры, например, хочу посмотреть, какие релизы содержат нужный мне коммит, например, вот такой вот

0:01:50.560,0:01:52.119
только этот релиз

0:01:52.119,0:01:55.019
также можно добавить флаг "-n" чтобы дополнительно

0:01:55.270,0:02:02.579
выводилось сообщение коммита, на которое тег указывает, и дальше количество строк из этого сообщения, которое надо вывести, по умолчанию одна строка

0:02:02.740,0:02:04.740
как правило, этого достаточно и

0:02:05.170,0:02:07.170
вот у нас таки сообщениями

0:02:07.240,0:02:12.569
дальше, если меня интересуют подробности, я могу посмотреть их через "git show" или через "git log"

0:02:12.760,0:02:16.289
вывести историю разработки, начиная от данного тега и так далее

0:02:17.020,0:02:24.359
если тегов много, то вывод можно ограничить, например, в проекте очень много версий, а меня интересуют только те, которые начинаются с

0:02:24.730,0:02:32.310
1.1 для этого добавляю "-l" и соответствующую маску, пока что у меня только одна такая версия, возможно, в будущем их будет больше

0:02:33.040,0:02:35.370
еще ряд фильтров вы найдете в документации

0:02:35.890,0:02:42.419
теги бывают двух видов: первый -  это, так называемые, легкие теги, которые представляют собой только ссылку на коммит 

0:02:42.730,0:02:48.390
второй - это теги с аннотацией, до этого мы использовали только легкие теги, давайте я их сейчас удалю

0:02:49.030,0:02:53.130
для этого "-d" и дальше название тегов, которые я хочу убрать

0:02:54.610,0:03:00.479
готово. Для создания тега с аннотацией используется флаг "-a" и дальше все тоже самое

0:03:01.900,0:03:08.580
если сейчас запущу, то вызовется редактор, в котором мне нужно будет набрать описание тега, либо я могу как и для коммита

0:03:08.800,0:03:12.359
используя флаг "-m" задать его напрямую в командной строке и

0:03:13.239,0:03:18.209
создам еще один тег, пусть указывает туда, куда сейчас указывает ветка мастер

0:03:19.720,0:03:27.239
принципиальное отличие от тега с аннотацией, он содержит информацию, то есть это не просто голая метка, а метка с привязанным к ней

0:03:27.489,0:03:32.879
сообщением, как мы видели выше и также хранящей информацию о том, кто и когда ее сделал

0:03:33.459,0:03:40.379
то есть в нашем случае, кто решил, что на данном коммите будет этот конкретный релиз, что тоже может быть довольно-таки важно

0:03:40.720,0:03:42.239
чтобы это продемонстрировать

0:03:42.239,0:03:46.078
я вызову "git show" с нашим новым уже аннотированным тегом и

0:03:46.840,0:03:52.709
видите в отличие от легкого тега здесь информация: кто создал этот тег, когда он был создан и,

0:03:52.930,0:03:58.049
конечно же, описание, а уже потом коммит, так как аннотированные теги более

0:03:58.329,0:04:01.649
информативны в большинстве ситуации рекомендуется использовать именно их
