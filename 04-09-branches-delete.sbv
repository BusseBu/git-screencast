0:00:00.380,0:00:04.820
Итак, теперь, когда мы сделали объединение, нужна ли нам еще ветка fix?

0:00:05.160,0:00:09.500
Напомню - цель ее создания была в том, чтобы изменения, которые мы в ней делаем,

0:00:09.500,0:00:13.440
пока они не готовы, не были видны в ветке master, нашей основной.

0:00:13.920,0:00:20.200
Но когда изменения доделаны и объединены с master, то, как говорится, «мавр сделал свое дело - мавр может уходить».

0:00:20.480,0:00:26.060
Ветка fix больше не нужна - зачем нам еще одна ссылка на тот же коммит? Давайте ее удалим.

0:00:26.940,0:00:33.260
Для удаления ветки используется команда "git branch -d" и, в данном случае, "fix".

0:00:34.340,0:00:40.560
Готово. Как видно по картинке, эта команда удаляет только ссылку fix, а сами коммиты остаются в Git.

0:00:41.000,0:00:45.260
Так что вместо двух веток у нас теперь одна - как видите, все очень просто!

0:00:45.840,0:00:51.480
Хотя есть один нюанс - эта команда произведет удаление, только если ветка объединена с текущей.

0:00:51.860,0:00:54.500
Как вот в нашем случае fix была объединена с master.

0:00:54.500,0:00:58.560
В ней не было своих отдельных коммитов, поэтому и удаление прошло успешно.

0:00:59.300,0:01:01.960
А вот если мы попробуем удалить ветку feature...

0:01:02.000,0:01:03.500
Видите, ошибка.

0:01:03.800,0:01:06.620
Смысл в том, что удаление ветки - это опасная процедура.

0:01:06.920,0:01:11.220
Git нас оберегает, чтобы мы не удалили ветку, которая еще может быть нужна.

0:01:11.780,0:01:16.720
Действительно, давайте представим на минутку, что ветка feature была удалена. Раз - и ее нет.

0:01:17.540,0:01:21.560
В этом случае коммиты - вот этот и вот этот - который раньше были только в ней,

0:01:21.960,0:01:24.400
больше не участвуют ни в одной из ветвей разработки.

0:01:25.360,0:01:27.360
В данном случае осталась только одна ветка master.

0:01:28.160,0:01:29.980
И вот коммиты, который есть в ней.

0:01:30.660,0:01:31.780
А вот этих нет.

0:01:32.460,0:01:39.260
Коммиты, которые недоступны ни по одной из ссылок, называются недостижимыми - и со временем Git удаляет их из своей базы.

0:01:39.820,0:01:41.860
Если это то, чего мы действительно хотим -

0:01:42.460,0:01:47.300
то есть ветка feature тупиковая, и мы хотим удалить ее и выбросить те коммиты, которые только в ней -

0:01:47.760,0:01:52.640
тогда git branch -D вот это сделает - все, как описано.

0:01:53.300,0:01:58.160
При этом еще раз замечу, что при любой форме запуска эта команда удаляет только ссылку.

0:01:58.540,0:02:01.760
И какое-то время недостижимые коммиты еще сохраняются в базе.

0:02:02.020,0:02:06.200
Поэтому, если удаление было только что, - то на самом деле картинка сейчас вот такая.

0:02:07.100,0:02:10.960
Если оказалось, что ветка все еще нужна, то удаление можно отменить.

0:02:11.640,0:02:14.720
А если точнее, слово «отменить» здесь не совсем правильное.

0:02:15.120,0:02:18.000
Можно создать новую ветку с таким же названием,

0:02:18.000,0:02:23.060
которая указывает на тот же коммит, что и удаленная. То есть вот на этот идентификатор.

0:02:23.560,0:02:25.800
Вот и все! Ветка feature снова присутствует.
